<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林木博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-20T05:57:16.806Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>JSL</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义直方图</title>
    <link href="http://example.com/jsblog/eaa37956.html"/>
    <id>http://example.com/jsblog/eaa37956.html</id>
    <published>2020-12-20T05:56:57.000Z</published>
    <updated>2020-12-20T05:57:16.806Z</updated>
    
    <content type="html"><![CDATA[<p>在实际的应用场景中，我们可以根据需求 调整计算的直方图区间。<a id="more"></a>针对灰度直方图，我们可以将区间[0,255]分成不同的区间范围，然后分别统计各个区间的灰度分布，进而实现自定义的直方图：</p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    cv::Mat srcImage = cv::imread(<span class="string">&quot;E:/CodeBlocks/data/lena.jpg&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!srcImage.data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to load image&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转换为灰度图像</span></span><br><span class="line">    cv::Mat grayImage;</span><br><span class="line">    cv::cvtColor(srcImage,grayImage,cv::COLOR_BGR2GRAY);</span><br><span class="line">    <span class="comment">//设置计算直方图的参数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> channles[<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> histSize[<span class="number">1</span>] = &#123;<span class="number">256</span>&#125;;</span><br><span class="line">    <span class="keyword">float</span> range[] = &#123;<span class="number">0</span>,<span class="number">40</span>,<span class="number">80</span>,<span class="number">120</span>,<span class="number">160</span>,<span class="number">200</span>,<span class="number">220</span>,<span class="number">255</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span> *ranges[<span class="number">1</span>] = &#123;range&#125;;</span><br><span class="line">    cv::MatND hist;</span><br><span class="line">    cv::calcHist(&amp;grayImage,<span class="number">1</span>,channles,cv::Mat(),hist,<span class="number">1</span>,histSize,ranges,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//求直方图中得最大值</span></span><br><span class="line">    <span class="keyword">double</span> maxVal = <span class="number">0.0</span>;</span><br><span class="line">    cv::minMaxLoc(hist,<span class="number">0</span>,&amp;maxVal,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//设置直方图绘图参数</span></span><br><span class="line">    <span class="keyword">int</span> Hist_size = hist.rows;</span><br><span class="line">    <span class="function">cv::Mat <span class="title">histImage</span><span class="params">(Hist_size,Hist_size,CV_8U,cv::Scalar(<span class="number">255</span>))</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; Hist_size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">float</span> binVal = hist.at&lt;<span class="keyword">float</span>&gt;(i);</span><br><span class="line">        <span class="comment">//归一化</span></span><br><span class="line">        <span class="keyword">int</span> intensity = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(binVal * Hist_size / maxVal);</span><br><span class="line">        <span class="comment">//绘制直方图信息</span></span><br><span class="line">        cv::line(histImage,cv::Point(i,Hist_size),cv::Point(i,Hist_size-intensity),cv::Scalar::all(<span class="number">0</span>),<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cv::imshow(<span class="string">&quot;srcImage&quot;</span>,srcImage);</span><br><span class="line">    cv::imshow(<span class="string">&quot;gray&quot;</span>,grayImage);</span><br><span class="line">    cv::imshow(<span class="string">&quot;hist&quot;</span>,histImage);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在实际的应用场景中，我们可以根据需求 调整计算的直方图区间。&lt;/p&gt;</summary>
    
    
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>H-S直方图</title>
    <link href="http://example.com/jsblog/457223e2.html"/>
    <id>http://example.com/jsblog/457223e2.html</id>
    <published>2020-12-20T05:56:16.000Z</published>
    <updated>2020-12-20T05:56:32.249Z</updated>
    
    <content type="html"><![CDATA[<p>为了描述图像的特性，常常需要分析HSV色彩空间下的直方图。<a id="more"></a></p><p>要分析HSV色彩空间下的直方图，首先要将图像转换到HSV色彩空间中，然后将对应的H通道和S通道进行单元划分，最后在二维图像 上生成直方图。</p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">sin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cos</span>;</span><br><span class="line"><span class="comment">//使用CommandLineParser对输入的参数进行分析，获取输入的图片路径</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">GetFileName</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    argc : the size of argv[]</span></span><br><span class="line"><span class="comment">    argv : the parameters of comdline</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* key = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h usage? || usage information&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@picture || input picture&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="function">cv::CommandLineParser <span class="title">parser</span><span class="params">(argc,argv,key)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有输入图片路径</span></span><br><span class="line">    <span class="keyword">if</span> (!parser.check())</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = parser.get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = GetFileName(argc,argv);</span><br><span class="line">    cv::Mat srcImage = cv::imread(fileName);</span><br><span class="line">    <span class="keyword">if</span> (!srcImage.data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to load image&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cv::Mat hsvImage;</span><br><span class="line">    cv::cvtColor(srcImage,hsvImage,cv::COLOR_BGR2HSV);</span><br><span class="line">    <span class="comment">//直方图参数</span></span><br><span class="line">    <span class="keyword">int</span> hbins = <span class="number">30</span>,sbins = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> histSize[] = &#123;hbins,sbins&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> channels[] = &#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">float</span> hranges[] = &#123;<span class="number">0</span>,<span class="number">180</span>&#125;;</span><br><span class="line">    <span class="keyword">float</span> sranges[] = &#123;<span class="number">0</span>,<span class="number">256</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span>  *ranges[] = &#123;hranges,sranges&#125;;</span><br><span class="line">    cv::MatND hist;</span><br><span class="line">    cv::calcHist(&amp;hsvImage,<span class="number">1</span>,channels,cv::Mat(),hist,<span class="number">2</span>,histSize,ranges,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//找到直方图中得最大值</span></span><br><span class="line">    <span class="keyword">double</span> maxVal = <span class="number">0.0</span>;</span><br><span class="line">    cv::minMaxLoc(hist,<span class="number">0</span>,&amp;maxVal,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> scale = <span class="number">10</span>;</span><br><span class="line">    cv::Mat histImage = cv::Mat::zeros(sbins*scale,hbins * scale,CV_8UC3);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; hbins;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j &lt; sbins;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">float</span> binValue = hist.at&lt;<span class="keyword">float</span>&gt;(i,j);</span><br><span class="line">            <span class="keyword">int</span> intensity = cvRound(binValue*<span class="number">255</span> / maxVal);</span><br><span class="line">            cv::rectangle(histImage,cv::Point(i*scale,j*scale),</span><br><span class="line">                          cv::Point((i+<span class="number">1</span>)*scale<span class="number">-1</span>,(j+<span class="number">1</span>)*scale<span class="number">-1</span>),cv::Scalar::all(intensity),<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cv::imshow(<span class="string">&quot;H-S HIst&quot;</span>,histImage);</span><br><span class="line">    cv::imshow(<span class="string">&quot;srcImage&quot;</span>,srcImage);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;为了描述图像的特性，常常需要分析HSV色彩空间下的直方图。&lt;/p&gt;</summary>
    
    
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>双阈值</title>
    <link href="http://example.com/jsblog/fda80a12.html"/>
    <id>http://example.com/jsblog/fda80a12.html</id>
    <published>2020-12-20T05:54:56.000Z</published>
    <updated>2020-12-20T05:55:17.384Z</updated>
    
    <content type="html"><![CDATA[<p>对于图像具有明显的双分界特征，可以使用双阈值法进行二值化操作。<a id="more"></a>根据双阈值化操作方法，对8bit灰度图像使用该方法进行操作时，需要预先设定好阈值量thresh1,thresh2,且thresh1&lt;thresh2,在thresh1到thresh2范围内的像素都被设置为maxval，其他均为0，即下面表达式：</p><p><img src="https://pic2.zhimg.com/80/v2-e75e8b8fdc12a0d6264f843dd4cde009_720w.jpg" alt="img"></p><p>代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">sin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cos</span>;</span><br><span class="line"><span class="comment">//使用CommandLineParser对输入的参数进行分析，获取输入的图片路径</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">GetFileName</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    argc : the size of argv[]</span></span><br><span class="line"><span class="comment">    argv : the parameters of comdline</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* key = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h usage? || usage information&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@picture || input picture&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="function">cv::CommandLineParser <span class="title">parser</span><span class="params">(argc,argv,key)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有输入图片路径</span></span><br><span class="line">    <span class="keyword">if</span> (!parser.check())</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = parser.get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = GetFileName(argc,argv);</span><br><span class="line">    cv::Mat srcImage = cv::imread(fileName);</span><br><span class="line">    <span class="keyword">if</span> (!srcImage.data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to load image&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cv::Mat gray;</span><br><span class="line">    cv::cvtColor(srcImage,gray,cv::COLOR_BGR2GRAY);</span><br><span class="line">    <span class="keyword">double</span> thresh1 = <span class="number">150</span>;</span><br><span class="line">    <span class="keyword">double</span> thresh2 = <span class="number">220</span>;</span><br><span class="line">    <span class="keyword">double</span> maxval = <span class="number">255</span>;</span><br><span class="line">    cv::Mat dstImage,dstImage1,dstImage2;</span><br><span class="line"></span><br><span class="line">    cv::threshold(gray,dstImage1,thresh1,maxval,cv::THRESH_BINARY);</span><br><span class="line">    cv::threshold(gray,dstImage,thresh2,maxval,cv::THRESH_BINARY_INV);</span><br><span class="line"></span><br><span class="line">    cv::bitwise_and(dstImage1,dstImage,dstImage2);</span><br><span class="line">    cv::imshow(<span class="string">&quot;dstImage&quot;</span>,dstImage2);</span><br><span class="line"></span><br><span class="line">    cv::imshow(<span class="string">&quot;srcImage&quot;</span>,srcImage);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于图像具有明显的双分界特征，可以使用双阈值法进行二值化操作。&lt;/p&gt;</summary>
    
    
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>Adaptivethreshold</title>
    <link href="http://example.com/jsblog/c499a73.html"/>
    <id>http://example.com/jsblog/c499a73.html</id>
    <published>2020-12-20T05:54:15.000Z</published>
    <updated>2020-12-20T05:54:31.101Z</updated>
    
    <content type="html"><![CDATA[<p>对于阈值的设置我们很难确定，通过固定阈值很难将目标区域和背景区域分隔开来。<a id="more"></a>在实际使用中，通常是使用自适应阈值来完成目标的分隔。自适应阈值对于图像块中明亮变化明显的区域通常设置的会过大或者过小，进而保证图像中各个像素的阈值会随着周围邻域块的变化而变化。</p><p>OpenCV提供了adaptiveThreshold函数，该函数有两种自适应参数代表阈值计算方法，函数接口如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cv::adaptiveThreshold</span><span class="params">(InputArray src,</span></span></span><br><span class="line"><span class="function"><span class="params">                           OutputArray dst,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">double</span> maxValue,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">int</span> adaptiveMethod,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">int</span> thresholdType,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">int</span> blockSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">double</span> C)</span></span></span><br></pre></td></tr></table></figure><p>参数说明：</p><p>src : 输入的图像（单通道8位图像）</p><p>dst : 表示输出图像（尺寸和类型和输入图像一样）</p><p>maxval : 表示预设最大值</p><p>adaptiveMethod: 计算阈值的算法有两种ADAPTIVE_THRESH_MEAN_C或者ADAPTIVE_THRESH_GUASSIAN_C</p><p>thresholdType: 阈值类型只有两种THRESH_BINARY 或者THRESH_BINARY_INV</p><p>blockSize: 表示邻域大小</p><p>C: 从均值或加权均值提取的数，可以是负数</p><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">sin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cos</span>;</span><br><span class="line"><span class="comment">//使用CommandLineParser对输入的参数进行分析，获取输入的图片路径</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">GetFileName</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    argc : the size of argv[]</span></span><br><span class="line"><span class="comment">    argv : the parameters of comdline</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* key = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h usage? || usage information&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@picture || input picture&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="function">cv::CommandLineParser <span class="title">parser</span><span class="params">(argc,argv,key)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有输入图片路径</span></span><br><span class="line">    <span class="keyword">if</span> (!parser.check())</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = parser.get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">void</span> *userdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat dstImage;</span><br><span class="line">    cv::Mat grayImage = *(cv::Mat*)userdata;</span><br><span class="line">    cv::adaptiveThreshold(grayImage,dstImage,<span class="number">255</span>,pos,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>);</span><br><span class="line">    cv::imshow(<span class="string">&quot;gray&quot;</span>,dstImage);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = GetFileName(argc,argv);</span><br><span class="line">    cv::Mat srcImage = cv::imread(fileName);</span><br><span class="line">    <span class="keyword">if</span> (!srcImage.data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot; fail to load image&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cv::Mat grayImage;</span><br><span class="line">    cv::cvtColor(srcImage,grayImage,cv::COLOR_BGR2GRAY);</span><br><span class="line">    cv::namedWindow(<span class="string">&quot;gray&quot;</span>);</span><br><span class="line">    cv::imshow(<span class="string">&quot;gray&quot;</span>,grayImage);</span><br><span class="line">    cv::createTrackbar(<span class="string">&quot;threshold&quot;</span>,<span class="string">&quot;gray&quot;</span>,<span class="number">0</span>,<span class="number">1</span>,onChange,(<span class="keyword">void</span>*)&amp;grayImage);</span><br><span class="line">    cv::imshow(<span class="string">&quot;srcImage&quot;</span>,srcImage);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于阈值的设置我们很难确定，通过固定阈值很难将目标区域和背景区域分隔开来。&lt;/p&gt;</summary>
    
    
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>threshold</title>
    <link href="http://example.com/jsblog/eb7a2a96.html"/>
    <id>http://example.com/jsblog/eb7a2a96.html</id>
    <published>2020-12-20T05:53:10.000Z</published>
    <updated>2020-12-20T05:53:34.072Z</updated>
    
    <content type="html"><![CDATA[<p>OpenCV中提供了阈值化函数threshold<a id="more"></a>该函数原型如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">threshold</span><span class="params">(InputArray src,</span></span></span><br><span class="line"><span class="function"><span class="params">                 OutputArray dst,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">double</span> thresh,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">double</span> maxval,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> type)</span></span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>src ： 表示输入图像</p><p>dst : 表示输出图像（尺寸和类型和输入图像一样）</p><p>thresh : 表示阈值</p><p>maxval : 表示预设最大值</p><p>type : 表示阈值化处理的类型设置（type类型有一下几种）</p><p><img src="https://pic1.zhimg.com/80/v2-660d436908c34ba1b0f3d1cdd1fbf518_720w.jpg" alt="img"></p><p>其枚举值如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> ThresholdTypes &#123;</span><br><span class="line">    THRESH_BINARY     = <span class="number">0</span>,</span><br><span class="line">    THRESH_BINARY_INV = <span class="number">1</span>, </span><br><span class="line">    THRESH_TRUNC      = <span class="number">2</span>, </span><br><span class="line">    THRESH_TOZERO     = <span class="number">3</span>, </span><br><span class="line">    THRESH_TOZERO_INV = <span class="number">4</span>, </span><br><span class="line">    THRESH_MASK       = <span class="number">7</span>,</span><br><span class="line">    THRESH_OTSU       = <span class="number">8</span>, <span class="comment">//!&lt; flag, use Otsu algorithm to choose the optimal threshold value</span></span><br><span class="line">    THRESH_TRIANGLE   = <span class="number">16</span> <span class="comment">//!&lt; flag, use Triangle algorithm to choose the optimal threshold value</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">sin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cos</span>;</span><br><span class="line"><span class="comment">//使用CommandLineParser对输入的参数进行分析，获取输入的图片路径</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">GetFileName</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    argc : the size of argv[]</span></span><br><span class="line"><span class="comment">    argv : the parameters of comdline</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* key = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h usage? || usage information&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@picture || input picture&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="function">cv::CommandLineParser <span class="title">parser</span><span class="params">(argc,argv,key)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有输入图片路径</span></span><br><span class="line">    <span class="keyword">if</span> (!parser.check())</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = parser.get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">void</span> *userdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat dstImage;</span><br><span class="line">    cv::Mat grayImage = *(cv::Mat*)userdata;</span><br><span class="line">    cv::threshold(grayImage,dstImage,<span class="number">130</span>,<span class="number">255</span>,pos);</span><br><span class="line">    cv::imshow(<span class="string">&quot;gray&quot;</span>,dstImage);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = GetFileName(argc,argv);</span><br><span class="line">    cv::Mat srcImage = cv::imread(fileName);</span><br><span class="line">    <span class="keyword">if</span> (!srcImage.data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot; fail to load image&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cv::Mat grayImage;</span><br><span class="line">    cv::cvtColor(srcImage,grayImage,cv::COLOR_BGR2GRAY);</span><br><span class="line">    cv::namedWindow(<span class="string">&quot;gray&quot;</span>);</span><br><span class="line">    cv::imshow(<span class="string">&quot;gray&quot;</span>,grayImage);</span><br><span class="line">    cv::createTrackbar(<span class="string">&quot;threshold&quot;</span>,<span class="string">&quot;gray&quot;</span>,<span class="number">0</span>,<span class="number">4</span>,onChange,(<span class="keyword">void</span>*)&amp;grayImage);</span><br><span class="line">    cv::imshow(<span class="string">&quot;srcImage&quot;</span>,srcImage);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenCV中提供了阈值化函数threshold&lt;/p&gt;</summary>
    
    
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV之阈值化</title>
    <link href="http://example.com/jsblog/16be6c4d.html"/>
    <id>http://example.com/jsblog/16be6c4d.html</id>
    <published>2020-12-20T05:51:50.000Z</published>
    <updated>2020-12-20T05:52:41.201Z</updated>
    
    <content type="html"><![CDATA[<p>图像的与阈值化操作就是利用图像像素点分布规律，设定阈值进行像素点分割，进而得到图像的二值化图像。<a id="more"></a></p><p>在阈值化处理中，最常用的算法就是OTSU，OTSU是一种寻找图像阈值的最大类间方差算法。算法步骤如下：</p><p>（1） 统计灰度级每个像素在整个图像中的数量</p><p>（2） 计算每个像素在整个图像中得概率分布</p><p>（3） 对灰度级进行遍历搜索，计算当前灰度值下前景背景类间概率</p><p>（4） 通过目标函数计算类内与类间下对应的阈值</p><p>从255个灰度级遍历t，使得t为某个值的时候，前景和背景的方差最大， 则 这个 t 值便是我们要求得的阈值。</p><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">sin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cos</span>;</span><br><span class="line"><span class="comment">//使用CommandLineParser对输入的参数进行分析，获取输入的图片路径</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">GetFileName</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    argc : the size of argv[]</span></span><br><span class="line"><span class="comment">    argv : the parameters of comdline</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* key = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h usage? || usage information&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@picture || input picture&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="function">cv::CommandLineParser <span class="title">parser</span><span class="params">(argc,argv,key)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有输入图片路径</span></span><br><span class="line">    <span class="keyword">if</span> (!parser.check())</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = parser.get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">OTSU</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; inputImage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rows = inputImage.rows;</span><br><span class="line">    <span class="keyword">int</span> cols = inputImage.cols;</span><br><span class="line">    <span class="keyword">int</span> threshold = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//统计每个像素</span></span><br><span class="line">    <span class="keyword">int</span> nPixels[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">float</span> nProdis[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; <span class="number">256</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nPixels[i] = <span class="number">0</span>;</span><br><span class="line">        nProdis[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; rows;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j &lt; cols;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            nPixels[(<span class="keyword">int</span>)inputImage.at&lt;uchar&gt;(j,i)] ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算概率分布</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">256</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nProdis[i] = (<span class="keyword">float</span>) nPixels[i] / (rows * cols);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历灰度级，找出类内类间最大方差</span></span><br><span class="line">    <span class="keyword">float</span> delta_temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> delta_max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> w0,w1,u0,u1,u0_temp,u1_temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; <span class="number">256</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        w0 = <span class="number">0</span>; w1 =<span class="number">0</span>;u0=<span class="number">0</span>;u1=<span class="number">0</span>;u0_temp = <span class="number">0</span>;u1_temp=<span class="number">0</span>;delta_temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>  j=<span class="number">0</span>;j &lt; <span class="number">256</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt;= i)</span><br><span class="line">            &#123;</span><br><span class="line">                w0 += nProdis[j];</span><br><span class="line">                u0_temp += j*nProdis[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                w1 += nProdis[j];</span><br><span class="line">                u1_temp += j* nProdis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算平均灰度</span></span><br><span class="line">        u0 = u0_temp / w0;</span><br><span class="line">        u1 = u1_temp / w1;</span><br><span class="line">        delta_temp = (<span class="keyword">float</span>)(w0 * w1*<span class="built_in">pow</span>((u0-u1),<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">if</span> (delta_temp &gt; delta_max)</span><br><span class="line">        &#123;</span><br><span class="line">            delta_max = delta_temp;</span><br><span class="line">            threshold = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> threshold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> ImageFilePath = GetFileName(argc,argv);</span><br><span class="line">    cv::Mat srcImage = cv::imread(ImageFilePath);</span><br><span class="line">    <span class="keyword">if</span> (srcImage.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to load image&quot;</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cv::Mat grayImage;</span><br><span class="line">    cv::cvtColor(srcImage,grayImage,cv::COLOR_BGR2GRAY);</span><br><span class="line">    <span class="keyword">int</span> threshold = OTSU(grayImage);</span><br><span class="line">    cv::Mat otsuImage = cv::Mat::zeros(grayImage.size(),CV_8UC1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; grayImage.rows;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; grayImage.cols;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (grayImage.at&lt;uchar&gt;(j,i) &gt; threshold)</span><br><span class="line">                otsuImage.at&lt;uchar&gt;(j,i) = <span class="number">255</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cv::imshow(<span class="string">&quot;gray&quot;</span>,grayImage);</span><br><span class="line">    cv::imshow(<span class="string">&quot;otsu&quot;</span>,otsuImage);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;图像的与阈值化操作就是利用图像像素点分布规律，设定阈值进行像素点分割，进而得到图像的二值化图像。&lt;/p&gt;</summary>
    
    
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>反色处理</title>
    <link href="http://example.com/jsblog/5e53ead5.html"/>
    <id>http://example.com/jsblog/5e53ead5.html</id>
    <published>2020-12-20T05:51:18.000Z</published>
    <updated>2020-12-20T05:51:35.586Z</updated>
    
    <content type="html"><![CDATA[<p>对于3通道彩色图像，在处理二值化图像的时候需要进行反色处理。<a id="more"></a>反色处理主要对每个彩色分量取反例如在RGB三彩色情况下是使用255减去原先的彩色分量。</p><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">sin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cos</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">abs</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::min;</span><br><span class="line"><span class="comment">//使用CommandLineParser对输入的参数进行分析，获取输入的图片路径</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">GetFileName</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    argc : the size of argv[]</span></span><br><span class="line"><span class="comment">    argv : the parameters of comdline</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* key = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h usage? || usage information&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@picture || input picture&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="function">cv::CommandLineParser <span class="title">parser</span><span class="params">(argc,argv,key)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有输入图片路径</span></span><br><span class="line">    <span class="keyword">if</span> (!parser.check())</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = parser.get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InverseColor</span><span class="params">(<span class="keyword">const</span> cv::Mat&amp; srcImage,cv::Mat&amp; dstImage)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    srcImage : the source picture</span></span><br><span class="line"><span class="comment">    dstImage : the destination picture</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    uchar table[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; <span class="number">256</span>;i++)</span><br><span class="line">        table[i] = <span class="number">255</span> -i;</span><br><span class="line">    <span class="function">cv::Mat <span class="title">lookTable</span><span class="params">(<span class="number">1</span>,<span class="number">256</span>,CV_8U)</span></span>;</span><br><span class="line">    uchar* pdata = lookTable.data;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; <span class="number">256</span>;i++)</span><br><span class="line">        pdata[i] = table[i];</span><br><span class="line"></span><br><span class="line">    cv::LUT(srcImage,lookTable,dstImage);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> ImageFilePath = GetFileName(argc,argv);</span><br><span class="line">    cv::Mat srcImage = cv::imread(ImageFilePath);</span><br><span class="line">    <span class="keyword">if</span> (srcImage.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to load image&quot;</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cv::Mat dstImage;</span><br><span class="line">    InverseColor(srcImage,dstImage);</span><br><span class="line">    cv::imshow(<span class="string">&quot;srcImage&quot;</span>,srcImage);</span><br><span class="line">    cv::imshow(<span class="string">&quot;dstImage&quot;</span>,dstImage);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于3通道彩色图像，在处理二值化图像的时候需要进行反色处理。&lt;/p&gt;</summary>
    
    
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>ROI</title>
    <link href="http://example.com/jsblog/e8988932.html"/>
    <id>http://example.com/jsblog/e8988932.html</id>
    <published>2020-12-20T05:50:28.000Z</published>
    <updated>2020-12-20T05:50:53.811Z</updated>
    
    <content type="html"><![CDATA[<p>ROI(region of interest)也就是感兴趣区域。<a id="more"></a>也就是图像的一部分。OpenCV使用rect可以提取出来图像的ROI。当然也可以利用鼠标左右键选择自己感兴趣的区域。</p><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">sin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cos</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">abs</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::min;</span><br><span class="line"><span class="comment">//使用CommandLineParser对输入的参数进行分析，获取输入的图片路径</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">GetFileName</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    argc : the size of argv[]</span></span><br><span class="line"><span class="comment">    argv : the parameters of comdline</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* key = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h usage? || usage information&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@picture || input picture&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="function">cv::CommandLineParser <span class="title">parser</span><span class="params">(argc,argv,key)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有输入图片路径</span></span><br><span class="line">    <span class="keyword">if</span> (!parser.check())</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = parser.get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line">cv::Point startPoint;</span><br><span class="line">cv::Point endPoint;</span><br><span class="line"><span class="keyword">bool</span> downFlag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">bool</span> upFlag = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetRoi</span><span class="params">(<span class="keyword">int</span> event,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> flags,<span class="keyword">void</span>* userdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat srcImage = *(cv::Mat*)userdata;</span><br><span class="line">    <span class="keyword">if</span> (event == CV_EVENT_LBUTTONDOWN)</span><br><span class="line">    &#123;</span><br><span class="line">        downFlag = <span class="literal">true</span>;</span><br><span class="line">        startPoint.x = x;</span><br><span class="line">        startPoint.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (event == CV_EVENT_LBUTTONUP)</span><br><span class="line">    &#123;</span><br><span class="line">        upFlag = <span class="literal">true</span>;</span><br><span class="line">        endPoint.x = x;</span><br><span class="line">        endPoint.y = y;</span><br><span class="line">        cv::Mat tempImage = srcImage.clone();</span><br><span class="line">         cv::rectangle(tempImage,startPoint,endPoint,cv::Scalar(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">2</span>,cv::LINE_8,<span class="number">0</span>);</span><br><span class="line">         cv::imshow(<span class="string">&quot;srcImage&quot;</span>,tempImage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (downFlag &amp;&amp; upFlag)</span><br><span class="line">    &#123;</span><br><span class="line">        cv::Rect rect;</span><br><span class="line">        rect.width = <span class="built_in">abs</span>(startPoint.x - endPoint.x);</span><br><span class="line">        rect.height = <span class="built_in">abs</span>(startPoint.y - endPoint.y);</span><br><span class="line">        rect.x = min(startPoint.x,endPoint.x);</span><br><span class="line">        rect.y = min(startPoint.y,startPoint.y);</span><br><span class="line"></span><br><span class="line">        <span class="function">cv::Mat <span class="title">roiImage</span><span class="params">(srcImage,rect)</span></span>;</span><br><span class="line"></span><br><span class="line">        cv::imshow(<span class="string">&quot;Roi&quot;</span>,roiImage);</span><br><span class="line">        downFlag = <span class="literal">false</span>;</span><br><span class="line">        upFlag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> ImageFilePath = GetFileName(argc,argv);</span><br><span class="line">    cv::Mat srcImage = cv::imread(ImageFilePath);</span><br><span class="line">    <span class="keyword">if</span> (srcImage.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to load image&quot;</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cv::namedWindow(<span class="string">&quot;srcImage&quot;</span>);</span><br><span class="line">    cv::imshow(<span class="string">&quot;srcImage&quot;</span>,srcImage);</span><br><span class="line">    cv::setMouseCallback(<span class="string">&quot;srcImage&quot;</span>,SetRoi,(<span class="keyword">void</span>*)&amp;srcImage);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ROI(region of interest)也就是感兴趣区域。&lt;/p&gt;</summary>
    
    
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>trackbar</title>
    <link href="http://example.com/jsblog/4e6c75d9.html"/>
    <id>http://example.com/jsblog/4e6c75d9.html</id>
    <published>2020-12-20T05:49:32.000Z</published>
    <updated>2020-12-20T05:50:07.799Z</updated>
    
    <content type="html"><![CDATA[<p>OpenCV中的滑块事件。<a id="more"></a>创建Trackbar的函数如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cv::createTrackbar</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;  trackbarname,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">const</span> <span class="built_in">string</span>&amp;  winname,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">int</span>            *vale,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">int</span>             count,</span></span></span><br><span class="line"><span class="function"><span class="params">                       TrackbarCallback onChange = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">void</span>             *userdata=<span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure><p>参数说明：</p><p>trackbarname : 滑动条名称</p><p>winname :窗口名称</p><p>value : 可选参数表示滑块创建时滑块所在滑动条的位置</p><p>count : 滑动条的最大位置，最小位置是0</p><p>onChange : 滑块位置变化时所调用的回调参数</p><p>userdata : 传递给回调函数的可选参数</p><p>TrackBarCallBack 回调函数：</p><p>typedef void(* cv::TrackbarCallback) (int pos, void *userdata)</p><p>参数说明：</p><p>pos : 当前滑块的位置</p><p>userdata : 可选的输入参数</p><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">sin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cos</span>;</span><br><span class="line"><span class="comment">//使用CommandLineParser对输入的参数进行分析，获取输入的图片路径</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">GetFileName</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    argc : the size of argv[]</span></span><br><span class="line"><span class="comment">    argv : the parameters of comdline</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* key = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h usage? || usage information&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@picture || input picture&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="function">cv::CommandLineParser <span class="title">parser</span><span class="params">(argc,argv,key)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有输入图片路径</span></span><br><span class="line">    <span class="keyword">if</span> (!parser.check())</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = parser.get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TrackBarCallback</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">void</span> *userdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat gray = *(cv::Mat *)userdata;</span><br><span class="line">    cv::Mat dstImage;</span><br><span class="line">    cv::threshold(gray,dstImage,pos,<span class="number">255</span>,cv::THRESH_BINARY); <span class="comment">//二值化处理</span></span><br><span class="line">    cv::imshow(<span class="string">&quot;threshold&quot;</span>,dstImage);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = GetFileName(argc,argv);</span><br><span class="line">    cv::Mat gray;</span><br><span class="line">    cv::Mat srcImage = cv::imread(fileName);</span><br><span class="line">    <span class="keyword">if</span> (srcImage.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to load image&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cv::imshow(<span class="string">&quot;srcImage&quot;</span>,srcImage);</span><br><span class="line">    cv::cvtColor(srcImage,gray,cv::COLOR_BGR2GRAY);</span><br><span class="line">   cv::namedWindow(<span class="string">&quot;threshold&quot;</span>);</span><br><span class="line">   cv::imshow(<span class="string">&quot;threshold&quot;</span>,gray);</span><br><span class="line">    cv::createTrackbar(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;threshold&quot;</span>,<span class="number">0</span>,<span class="number">255</span>,TrackBarCallback,(<span class="keyword">void</span>*)&amp;gray); <span class="comment">//创建滑块</span></span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenCV中的滑块事件。&lt;/p&gt;</summary>
    
    
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>鼠标事件</title>
    <link href="http://example.com/jsblog/9ad2b3bf.html"/>
    <id>http://example.com/jsblog/9ad2b3bf.html</id>
    <published>2020-12-20T05:48:32.000Z</published>
    <updated>2020-12-20T05:49:07.765Z</updated>
    
    <content type="html"><![CDATA[<p>鼠标事件回调函数原型如下 <a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cv::setMouseCallback</span><span class="params">(<span class="keyword">const</span> String&amp; winname,MouserCallBack onMouse,<span class="keyword">void</span> *userdata = <span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure><p>参数：<br>winname: 窗口名称</p><p>OnMouse : 鼠标事件的回调函数</p><p>userdata : 传递给回调函数的参数</p><p>MouseCallback函数定义为：</p><p>typedef void(* cv::MouseCallback)(int event,int x,int y,int flags,void *useradata);</p><p>参数说明：</p><p>event: 鼠标事件</p><p>x : 鼠标事件的x坐标</p><p>y : 鼠标事件的y坐标</p><p>flags: 鼠标事件的标志</p><p>userdata : 可选的参数</p><p>鼠标事件主要有下面几种：</p><p>CV_EVENT_MOUSEMOVE ：鼠标移动</p><p>CV_EVENT_LBUTTONDOWN : 鼠标左键按下</p><p>CV_EVENT_RBUTTONDOWN : 鼠标右键按下</p><p>CV_EVENT_MBUTTONDOWN ： 鼠标中键按下</p><p>CV_EVENT_LBUTTONUP ： 鼠标左键放开</p><p>CV_EVENT_RBUTTONUP ： 右键放开</p><p>CV_EVENT_MBUTTONUP ： 中键放开</p><p>CV_EVENT_LBUTTONDBLCLK ： 左键双击</p><p>CV_EVENT_RBUTTONDBLCLK ： 右键双击</p><p>CV_EVENT_MBUTTONDBLCLK ： 中键双击</p><p>CV_EVENT_MOUSEWHEEL ： 鼠标向前（+）或向后（-）滑动</p><p>CV_EVENT_MOUSEHWHEEL ： 鼠标向右（+）或向左（-）滑动</p><p>Flags主要有一下几种：</p><p>CV_EVENT_FLAG_LBUTTON ：左键拖拽</p><p>CV_EVENT_FLAG_RBUTTON ： 右键拖拽</p><p>CV_EVENT_FLAG_MBUTTON ： 中键拖拽</p><p>CV_EVENT_FLAG_CTRLKEY ： Ctrl按下不放</p><p>CV_EVENT_FLAG_SHIFTKEY ： shift按下不放</p><p>CV_EVENT_FLAG_ALTKEY ： alt按下不放</p><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">sin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cos</span>;</span><br><span class="line"><span class="comment">//使用CommandLineParser对输入的参数进行分析，获取输入的图片路径</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">GetFileName</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    argc : the size of argv[]</span></span><br><span class="line"><span class="comment">    argv : the parameters of comdline</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* key = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h usage? || usage information&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@picture || input picture&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="function">cv::CommandLineParser <span class="title">parser</span><span class="params">(argc,argv,key)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有输入图片路径</span></span><br><span class="line">    <span class="keyword">if</span> (!parser.check())</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = parser.get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line">cv::Mat srcImage;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MouseEvent</span><span class="params">(<span class="keyword">int</span> event,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> flags,<span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> text[<span class="number">30</span>];</span><br><span class="line">    cv::Mat tempImage;</span><br><span class="line">    tempImage = srcImage.clone();</span><br><span class="line">    <span class="keyword">if</span> (event == CV_EVENT_LBUTTONDOWN) <span class="comment">//左键落下</span></span><br><span class="line">    &#123;</span><br><span class="line">        cv::Vec3b p = tempImage.at&lt;cv::Vec3b&gt;(y,x);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(text,<span class="string">&quot;B = %d,G = %d, R = %d&quot;</span>,p[<span class="number">0</span>],p[<span class="number">1</span>],p[<span class="number">2</span>]);</span><br><span class="line">        cv::putText(tempImage,text,cv::Point(<span class="number">8</span>,<span class="number">20</span>),cv::FONT_HERSHEY_PLAIN,<span class="number">2</span>,</span><br><span class="line">                    cv::Scalar(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(text,<span class="string">&quot;x = %d,y = %d&quot;</span>,x,y);</span><br><span class="line">        cv::putText(tempImage,text,cv::Point(<span class="number">8</span>,<span class="number">20</span>),cv::FONT_HERSHEY_PLAIN,<span class="number">2</span>,</span><br><span class="line">                     cv::Scalar(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    cv::imshow(<span class="string">&quot;srcImage&quot;</span>,tempImage);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = GetFileName(argc,argv);</span><br><span class="line">    srcImage = cv::imread(fileName);</span><br><span class="line">    <span class="keyword">if</span> (srcImage.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to load image&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cv::namedWindow(<span class="string">&quot;srcImage&quot;</span>);</span><br><span class="line">    cv::imshow(<span class="string">&quot;srcImage&quot;</span>,srcImage);</span><br><span class="line">    cv::setMouseCallback(<span class="string">&quot;srcImage&quot;</span>,MouseEvent);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line">    cv::destroyAllWindows();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;鼠标事件回调函数原型如下&lt;/p&gt;</summary>
    
    
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>VideoWriter</title>
    <link href="http://example.com/jsblog/13cab75d.html"/>
    <id>http://example.com/jsblog/13cab75d.html</id>
    <published>2020-12-20T05:47:44.000Z</published>
    <updated>2020-12-20T05:48:07.426Z</updated>
    
    <content type="html"><![CDATA[<p>OpenCV提供了写入视频的接口类VideoWriter,VideoWriter是向文件中以指定的编码格式将每一帧图片写入到视频中。<a id="more"></a>VideoWriter提供了常用的三种构造函数：</p><p>VideoWriter::VideoWriter()</p><p>VideoWriter::VideoWriter(const <a href="https://link.zhihu.com/?target=https://docs.opencv.org/3.4/d1/d8f/classcv_1_1String.html">String</a> &amp;filename, int <a href="https://zhuanlan.zhihu.com/p/245600991/edit#afec93f94dc6c0b3e28f4dd153bc5a7f0">fourcc</a>, double fps, <a href="https://zhuanlan.zhihu.com/p/245600991/edit#ga346f563897249351a34549137c8532a0">Size</a> frameSize, bool isColor=true)</p><p>VideoWriter::VideoWriter(const <a href="https://link.zhihu.com/?target=https://docs.opencv.org/3.4/d1/d8f/classcv_1_1String.html">String</a> &amp;filename, int apiPreference, int <a href="https://zhuanlan.zhihu.com/p/245600991/edit#afec93f94dc6c0b3e28f4dd153bc5a7f0">fourcc</a>, double fps, <a href="https://zhuanlan.zhihu.com/p/245600991/edit#ga346f563897249351a34549137c8532a0">Size</a> frameSize, bool isColor=true)</p><p>说明：</p><p>第一个为构造参数为默认构造参数</p><p>第二个和第三个的参数说明如下：</p><p>filename : 输出视频文件的路径名称</p><p>fourcc: 字符类型的编码，表示用于编码视频文件的编码器。其中 VideoWriter::fourcc(‘P’,’I’,’M’,’1’)表示MPEG-1 编码文件扩展名为avi; VideoWriter::fourcc(‘X’,’V’,’I’,’D’)表示MPEG-4编码文件扩展名为avi; VideoWriter::fourcc(‘X’,’2’,’6’,’4’) 表示MPEG-4编码文件扩展名为mp4;</p><p>VideoWriter::fourcc(‘I’,’4’,’2’,’0’) 表示YUV编码，文件扩展名为avi;</p><p>VideoWriter::fourcc(‘M’,’P’,’4’,’V’) 表示旧的MPEG-4编码，文件扩展名为avi;</p><p>VideoWriter::fourcc(‘T’,’H’,’E’,’O’) 表示使用ogg vorbis，文件扩展名为ogv;</p><p>VideoWriter::fourcc(‘F’,’L’,’V’,’1’) 表示flash video,文件扩展名为flv;</p><p>fps: 表示帧率</p><p>frameSize : 表示每一帧图像的大小</p><p>isColor : 灰度图像或者是彩色图像（仅仅在windows上支持）</p><p>apiPreference： 使用指定的API，例如可以使用cv::CAP_FFMPEG 或者 cv::CAP_GSTREAMER等。</p><p>VideoWriter类还提供了write方法并且使用了重载运算符&lt;&lt;写入视频的每一帧。其函数原型如下：</p><p>VideoWriter&amp; VideoWriter::operator&lt;&lt;(Mat&amp; frame);</p><p>void VideoWriter::write(const Mat &amp;frame);</p><p>VideoCapture常用的一些函数如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>VideoWriter::isOpened()</td><td>Returns true if video writer has been initialized already</td></tr><tr><td>VideoWriter::getBackednName()</td><td>Returns used backend API name</td></tr><tr><td>VideoWriter::open(const String &amp;filename, int fourcc, double fps, Size frameSize, bool isColor=true);VideoWriter::open(const String &amp;filename,int apiPreference,int fourcc,double fps,Size frameSize,bool isColor=true);</td><td>Initializes or reinitializes video writer</td></tr><tr><td>VideoWriter::release()</td><td>Closes the video writer</td></tr><tr><td>VideoWriter::get(int propId);</td><td>Returns the specified VideoWriter property</td></tr><tr><td>VideoWriter::set(int propId,double value);</td><td>Sets a property in the VideoWriter</td></tr></tbody></table><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">sin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cos</span>;</span><br><span class="line"><span class="comment">//使用CommandLineParser对输入的参数进行分析，获取输入的图片路径</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">GetFileName</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    argc : the size of argv[]</span></span><br><span class="line"><span class="comment">    argv : the parameters of comdline</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* key = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h usage? || usage information&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@picture || input picture&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="function">cv::CommandLineParser <span class="title">parser</span><span class="params">(argc,argv,key)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有视频文件</span></span><br><span class="line">    <span class="keyword">if</span> (!parser.check())</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> fileName = parser.get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> outPut = <span class="string">&quot;output.avi&quot;</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> VideoFile = GetFileName(argc,argv);</span><br><span class="line">    <span class="function">cv::VideoCapture <span class="title">cap</span><span class="params">(VideoFile)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!cap.isOpened())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to open  &quot;</span>&lt;&lt; VideoFile &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cv::VideoWriter outputVideo;</span><br><span class="line"></span><br><span class="line">    cv::Size videoSize = cv::Size((<span class="keyword">int</span>)cap.get(CV_CAP_PROP_FRAME_WIDTH),(<span class="keyword">int</span>)cap.get(CV_CAP_PROP_FRAME_HEIGHT));</span><br><span class="line">    <span class="keyword">int</span> fourcc = cv::VideoWriter::fourcc(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;G&#x27;</span>); <span class="comment">//flash video</span></span><br><span class="line">    <span class="keyword">double</span> fps = cap.get(CV_CAP_PROP_FPS);</span><br><span class="line">    outputVideo.open(outPut,fourcc,<span class="number">25.0</span>,videoSize,<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (!outputVideo.isOpened())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to initializer the video writer&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;cv::Mat&gt; bgr; <span class="comment">//rgb色彩通道</span></span><br><span class="line">    cv::Mat frame;</span><br><span class="line">    cv::Mat dstImage;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cap &gt;&gt; frame;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分离颜色通道</span></span><br><span class="line">       <span class="keyword">if</span> (!frame.empty())</span><br><span class="line">       &#123;</span><br><span class="line">           cv::imshow(<span class="string">&quot;inputVideo&quot;</span>,frame);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//分离色彩通道</span></span><br><span class="line">           cv::split(frame,bgr);</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">int</span> size = bgr.size();</span><br><span class="line">               <span class="comment">//提取绿色通道</span></span><br><span class="line">               <span class="keyword">if</span> (i!=<span class="number">1</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   bgr[i] = cv::Mat::zeros(videoSize,bgr[<span class="number">1</span>].type());</span><br><span class="line">               &#125;</span><br><span class="line">                cv::merge(bgr,dstImage);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           cv::imshow(<span class="string">&quot;dst&quot;</span>,dstImage);</span><br><span class="line">           outputVideo &lt;&lt; dstImage;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">char</span> c = cv::waitKey(<span class="number">30</span>);</span><br><span class="line">       <span class="keyword">if</span>( c== <span class="number">27</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenCV提供了写入视频的接口类VideoWriter,VideoWriter是向文件中以指定的编码格式将每一帧图片写入到视频中。&lt;/p&gt;</summary>
    
    
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>VideoCapture</title>
    <link href="http://example.com/jsblog/9d1603cf.html"/>
    <id>http://example.com/jsblog/9d1603cf.html</id>
    <published>2020-12-20T05:46:48.000Z</published>
    <updated>2020-12-20T05:47:20.392Z</updated>
    
    <content type="html"><![CDATA[<p>OpenCV提供了操作视频的接口类VideoCapture<a id="more"></a></p><p>VideoCapture类可以从文件或者摄像设备中读取视频。VideoCapture提供了常用的三种构造函数：</p><p>VideoCapture::VideoCapture()</p><p>VideoCapture::VideoCapture(int device)</p><p>VideoCapture::VideoCapture(const string&amp; filename);</p><p>说明：</p><p>第一个是默认无参构造函数</p><p>第二个中参数device指定要打开的摄像头设备</p><p>第三个构造函数中filename 是指要打开的视频文件路径以及名称；</p><p>VideoCapture类还提供了read方法并且使用了重载运算符&gt;&gt; 获取视频的每一帧。其函数原型如下：</p><p>VideoCapture&amp; VideoCapture::operator&gt;&gt;(UMat&amp; frame);</p><p>VideoCapture&amp; VideoCapture::operator&gt;&gt;(Mat&amp; frame);</p><p>bool VideoCapture::read(OutputArray frame);</p><p>VideoCapture常用的一些函数如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>VideoCapture::isOpened()</td><td>Returns true if video capturing has been initialized already</td></tr><tr><td>VideoCapture::getBackednName()</td><td>Returns used backend API name</td></tr><tr><td>VideoCapture::grab()</td><td>Grabs the next frame from video file or capturing device</td></tr><tr><td>VideoCapture::open(int index)VideoCapture::open(const string&amp; filename)VideoCapture::open(int index,int apiPreference);VideoCapture::open(const string&amp; filename,int apiPreference);</td><td>Open video file or a capturing device or a IP video stream for video capturing with API Preference</td></tr><tr><td>VideoCapture::release()</td><td>Closes video file or capturing device</td></tr><tr><td>VideoCapture::retrieve(OutputArray image,int flags= 0);</td><td>Decodes and returns the grabbed video frame.</td></tr><tr><td>VideoCapture::get(int propId)</td><td>Returns the specified VideoCapture property</td></tr><tr><td>VideoCapture::set(int propId,double value);</td><td>Sets a property in the VideoCapture</td></tr></tbody></table><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* keys = &#123;</span><br><span class="line">    <span class="string">&quot;&#123;help h uasge ? || print this message&#125;&quot;</span></span><br><span class="line">    <span class="string">&quot;&#123;@video || video file, if not defined try to usewebcamera&#125;&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">cv::CommandLineParser <span class="title">parser</span><span class="params">(argc,argv,keys)</span></span>;</span><br><span class="line">    parser.about(<span class="string">&quot;video and camera&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (parser.has(<span class="string">&quot;help&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printMessage();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> videoFile = parser.get&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!parser.check())</span><br><span class="line">    &#123;</span><br><span class="line">        parser.printErrors();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cv::VideoCapture cap;</span><br><span class="line">    <span class="keyword">if</span> (videoFile != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        cap.open(videoFile);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cap.open(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!cap.isOpened())&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to decodec file&quot;</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cv::namedWindow(<span class="string">&quot;Video&quot;</span>,cv::WINDOW_AUTOSIZE);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cv::Mat frame;</span><br><span class="line">        cap &gt;&gt; frame;</span><br><span class="line">        <span class="keyword">if</span> (frame.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;frame is empty&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cv::imshow(<span class="string">&quot;Video&quot;</span>,frame);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cv::waitKey(<span class="number">30</span>) &gt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cap.release();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;OpenCV提供了操作视频的接口类VideoCapture&lt;/p&gt;</summary>
    
    
    
    
    <category term="OpenCV" scheme="http://example.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>av_seek_frame</title>
    <link href="http://example.com/jsblog/681275ed.html"/>
    <id>http://example.com/jsblog/681275ed.html</id>
    <published>2020-12-20T04:20:15.000Z</published>
    <updated>2020-12-20T04:20:59.402Z</updated>
    
    <content type="html"><![CDATA[<p>使用av_seek_frame截取视频，<a id="more"></a>首先看一下av_seek_frame()的函数原型,如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">av_seek_frame</span><span class="params">(AVFormatContext *s, <span class="keyword">int</span> stream_index, <span class="keyword">int64_t</span> timestamp,<span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>s: AVFormatContext类型的多媒体文件句柄</p><p>stream_index : int类型表示要进行操作的流索引</p><p>timestamp: int64_t类型的时间戳，表示要跳转到的时间位置</p><p>flags : 跳转方法，主要有一下几种</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AVSEEK_FLAG_BACKWARD 1 <span class="comment">///&lt; seek backward seek到timestamp之前的最近关键帧</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AVSEEK_FLAG_BYTE 2 <span class="comment">///&lt; seeking based on position in bytes 基于字节位置的跳转</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AVSEEK_FLAG_ANY 4 <span class="comment">///&lt; seek to any frame, even non-keyframes 跳转到任意帧，不一定是关键帧</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AVSEEK_FLAG_FRAME 8 <span class="comment">///&lt; seeking based on frame number 基于帧数量的跳转</span></span></span><br></pre></td></tr></table></figure><p>函数执行成功 返回值&gt;=0</p><p>在执行跳转之前使用AV_TIME_BASE进行一个时间戳的转换。</p><p>在代码中使用到了boost::program_options对命令行参数进行操作，如果要编译成功需要使用boost::program_options,如果不想使用可以直接将那部分代码删除，然后编译连接的时候要链接到ffmpeg lib即可。</p><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/program_options.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/avutil.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">namespace</span> opt = boost::program_options;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;av_register_all();av_log_set_level(AV_LOG_INFO);&#125;</span><br><span class="line"><span class="comment">//parse command line</span></span><br><span class="line"><span class="function">opt::variables_map <span class="title">getvm</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span>;</span><br><span class="line"><span class="comment">//find the media info in input file</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_streaminfo</span><span class="params">(AVFormatContext* *s,<span class="keyword">const</span> <span class="keyword">char</span> *input)</span></span>;</span><br><span class="line"><span class="comment">//process the input time</span></span><br><span class="line"><span class="function"><span class="keyword">int64_t</span> <span class="title">getStartTime</span><span class="params">(<span class="keyword">const</span> AVStream *in,<span class="keyword">int</span> seconds)</span></span>;</span><br><span class="line"><span class="comment">//set output format context and return out stream</span></span><br><span class="line"><span class="function">AVStream* <span class="title">set_output_format_context</span><span class="params">(<span class="keyword">const</span> AVStream* in,AVFormatContext **s,<span class="keyword">const</span> <span class="keyword">char</span> *output)</span></span>;</span><br><span class="line"><span class="comment">// seek start time and save it to output file</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seekToAndSave</span><span class="params">(AVFormatContext *ifmt_ctx,AVStream *in_stream,</span></span></span><br><span class="line"><span class="function"><span class="params">                   AVFormatContext *ofmt_ctx,AVStream *out_stream,<span class="keyword">int</span> index,<span class="keyword">int64_t</span> starttime)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    opt::variables_map vm = getvm(argc,argv);</span><br><span class="line">    Init();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input = vm[<span class="string">&quot;input&quot;</span>].as&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;().c_str();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *output = vm[<span class="string">&quot;output&quot;</span>].as&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;().c_str();</span><br><span class="line">    AVFormatContext *ifmt_ctx = avformat_alloc_context();</span><br><span class="line">    <span class="comment">//find stream info</span></span><br><span class="line">    find_streaminfo(&amp;ifmt_ctx,input);</span><br><span class="line">    <span class="comment">//find video stream index</span></span><br><span class="line">    <span class="keyword">int</span> video_stream_index = <span class="number">-1</span>;</span><br><span class="line">    video_stream_index = av_find_best_stream(ifmt_ctx,AVMEDIA_TYPE_VIDEO,<span class="number">-1</span>,<span class="number">-1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (video_stream_index)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to find video stream&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    AVStream *in_strem = ifmt_ctx-&gt;streams[video_stream_index];</span><br><span class="line">    <span class="comment">//find the seek time</span></span><br><span class="line">    <span class="keyword">int</span> seconds = vm.count(<span class="string">&quot;time&quot;</span>) ? vm[<span class="string">&quot;time&quot;</span>].as&lt;<span class="keyword">int</span>&gt;() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int64_t</span> startTime = getStartTime(in_strem,seconds);</span><br><span class="line">    <span class="comment">//the start time must less than the total length</span></span><br><span class="line">    <span class="keyword">if</span> (startTime &gt; in_strem-&gt;duration)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;start time must less than the total time&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//set output avformatcontext</span></span><br><span class="line">    AVFormatContext *ofmt_ctx = avformat_alloc_context();</span><br><span class="line">    AVStream *out_stream = set_output_format_context(in_strem,&amp;ofmt_ctx,output);</span><br><span class="line">    <span class="keyword">if</span> (avio_open(&amp;ofmt_ctx-&gt;pb,output,AVIO_FLAG_WRITE) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to open output file : %s&quot;</span>,output);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//seek and  save</span></span><br><span class="line">    seekToAndSave(ifmt_ctx,in_strem,ofmt_ctx,out_stream,video_stream_index,startTime);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    avio_close(ofmt_ctx-&gt;pb);</span><br><span class="line">    avformat_free_context(ofmt_ctx);</span><br><span class="line">    avformat_close_input(&amp;ifmt_ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">AVStream* <span class="title">set_output_format_context</span><span class="params">(<span class="keyword">const</span> AVStream* in,AVFormatContext **s,<span class="keyword">const</span> <span class="keyword">char</span> *output)</span></span>&#123;</span><br><span class="line">    assert(in != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (*s == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        *s = avformat_alloc_context();</span><br><span class="line">    &#125;</span><br><span class="line">    AVOutputFormat *oformat = av_guess_format(<span class="literal">NULL</span>,output,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (oformat == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to find the oformat&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    (*s)-&gt;oformat = oformat;</span><br><span class="line">    <span class="keyword">if</span> (avformat_alloc_output_context2(s,oformat,oformat-&gt;name,output) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to alloc output context&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    AVCodec *pCodec = avcodec_find_decoder(in-&gt;codecpar-&gt;codec_id);</span><br><span class="line">    <span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to find codec &quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    AVStream *out_stream = avformat_new_stream(*s,pCodec);</span><br><span class="line">    <span class="keyword">if</span> (out_stream == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to create out stream&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (avcodec_parameters_copy(out_stream-&gt;codecpar,in-&gt;codecpar) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to copy codec info&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    out_stream-&gt;codec-&gt;codec_tag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oformat-&gt;flags &amp; AVFMT_GLOBALHEADER)&#123;</span><br><span class="line">        out_stream-&gt;codec-&gt;flags |= AV_CODEC_FLAG_GLOBAL_HEADER;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//dump info</span></span><br><span class="line">    av_dump_format(*s,<span class="number">0</span>,output,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> out_stream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int64_t</span> <span class="title">getStartTime</span><span class="params">(<span class="keyword">const</span> AVStream *in,<span class="keyword">int</span> seconds)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int64_t</span> startTime = seconds * AV_TIME_BASE;</span><br><span class="line">    <span class="keyword">int64_t</span> target_time = av_rescale_q(startTime,AV_TIME_BASE_Q,in-&gt;time_base);</span><br><span class="line">    <span class="keyword">return</span> target_time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_streaminfo</span><span class="params">(AVFormatContext* *s,<span class="keyword">const</span> <span class="keyword">char</span> *input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (avformat_open_input(s,input,<span class="literal">NULL</span>,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to open %s&quot;</span>,input);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(*s,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to find stream info&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//dump the information to console</span></span><br><span class="line">    av_dump_format(*s,<span class="number">0</span>,input,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">opt::variables_map <span class="title">getvm</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">   <span class="comment">//step 1 create a description</span></span><br><span class="line">   <span class="function">opt::options_description <span class="title">descr</span><span class="params">(<span class="string">&quot;All options&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//step 2 add options</span></span><br><span class="line">   descr.add_options()</span><br><span class="line">   (<span class="string">&quot;time,t&quot;</span>,opt::value&lt;<span class="keyword">int</span>&gt;(),<span class="string">&quot;start time&quot;</span>)</span><br><span class="line">   (<span class="string">&quot;input,i&quot;</span>,opt::value&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(),<span class="string">&quot;input file&quot;</span>)</span><br><span class="line">   (<span class="string">&quot;output,o&quot;</span>,opt::value&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(),<span class="string">&quot;output file&quot;</span>)</span><br><span class="line">   (<span class="string">&quot;help,h&quot;</span>,<span class="string">&quot;use guide&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; descr &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//step 3 create variables_map</span></span><br><span class="line">   opt::variables_map vm;</span><br><span class="line">   opt::store(opt::parse_command_line(argc,argv,descr),vm);</span><br><span class="line">   opt::notify(vm);</span><br><span class="line">   <span class="keyword">if</span> (!vm.count(<span class="string">&quot;input&quot;</span>) || !vm.count(<span class="string">&quot;output&quot;</span>))&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; miss input file or output file&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (vm.count(<span class="string">&quot;help&quot;</span>))&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; descr &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> vm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seekToAndSave</span><span class="params">(AVFormatContext *ifmt_ctx,AVStream *in_stream,</span></span></span><br><span class="line"><span class="function"><span class="params">                   AVFormatContext *ofmt_ctx,AVStream *out_stream,<span class="keyword">int</span> index,<span class="keyword">int64_t</span> starttime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     assert(ifmt_ctx != <span class="literal">NULL</span>);</span><br><span class="line">     assert(in_stream != <span class="literal">NULL</span>);</span><br><span class="line">     assert(ofmt_ctx != <span class="literal">NULL</span>);</span><br><span class="line">     assert(out_stream != <span class="literal">NULL</span>);</span><br><span class="line">     <span class="keyword">if</span>(avformat_write_header(ofmt_ctx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to write header&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (av_seek_frame(ifmt_ctx,index,starttime,AVSEEK_FLAG_BACKWARD) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to seek time&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     AVFrame *pframe = av_frame_alloc();</span><br><span class="line">     AVPacket *pkt = av_packet_alloc();</span><br><span class="line">     av_init_packet(pkt);</span><br><span class="line">     <span class="keyword">while</span>(av_read_frame(ifmt_ctx,pkt) &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (pkt-&gt;stream_index == index)&#123;</span><br><span class="line">            pkt-&gt;pts = av_rescale_q_rnd(pkt-&gt;pts,in_stream-&gt;time_base,out_stream-&gt;time_base,<span class="keyword">static_cast</span>&lt;AVRounding&gt;(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX));</span><br><span class="line">            pkt-&gt;dts = av_rescale_q_rnd(pkt-&gt;dts,in_stream-&gt;time_base,out_stream-&gt;time_base,<span class="keyword">static_cast</span>&lt;AVRounding&gt;(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX));</span><br><span class="line">            pkt-&gt;duration = av_rescale_q(pkt-&gt;duration,in_stream-&gt;time_base,out_stream-&gt;time_base);</span><br><span class="line">            pkt-&gt;pos = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span> (av_interleaved_write_frame(ofmt_ctx,pkt) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to write frame&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            av_packet_unref(pkt);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(av_write_trailer(ofmt_ctx) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to write trailer&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">      av_frame_free(&amp;pframe);</span><br><span class="line">      av_packet_free(&amp;pkt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用av_seek_frame截取视频，&lt;/p&gt;</summary>
    
    
    
    
    <category term="FFMPEG" scheme="http://example.com/tags/FFMPEG/"/>
    
  </entry>
  
  <entry>
    <title>FFmpegPCM播转AAC</title>
    <link href="http://example.com/jsblog/1c43d3bb.html"/>
    <id>http://example.com/jsblog/1c43d3bb.html</id>
    <published>2020-12-20T04:18:46.000Z</published>
    <updated>2020-12-20T04:20:59.400Z</updated>
    
    <content type="html"><![CDATA[<p>要将PCM数据编码为AAC的格式，<a id="more"></a>首先了解一下什么是PCM数据，所谓PCM数据就是未被压缩的音频原始数据，而aac,mp3等都是被有损压缩后的数据。未被压缩的pcm数据所占用的储存空间比较大，而被压缩后的PCM数据所占用的空间会比较小，下面我们看一下所需要设置的压缩参数。</p><p>\1. sample_rate : 采样率，也就是每秒采集多少次声音样本</p><p>\2. channels : 声道的数目，有单通道和双通道</p><p>\3. sample_fmt : 采样的格式</p><p>\4. channel_layout: 声道布局</p><p>5.bit_rate : 比特率</p><p>需要将这些数据为AVCodecContext设置。</p><p>主要流程如下：</p><p>1.初始化输出环境：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">AVFormatContext *ofmt_ctx = avformat_alloc_context();</span><br><span class="line">  AVOutputFormat *oformat = av_guess_format(<span class="literal">NULL</span>,output,<span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (oformat==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to find the output format\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (avformat_alloc_output_context2(&amp;ofmt_ctx,oformat,oformat-&gt;name,output) &lt;<span class="number">0</span>)&#123;</span><br><span class="line">    av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to alloc output context\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  AVStream *out_stream = avformat_new_stream(ofmt_ctx,<span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (out_stream == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to create new stream\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2.设置AAC编码格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AVCodecContext *pCodecCtx = out_stream-&gt;codec;</span><br><span class="line"> pCodecCtx-&gt;codec_id = oformat-&gt;audio_codec;</span><br><span class="line"> pCodecCtx-&gt;codec_type = AVMEDIA_TYPE_AUDIO;</span><br><span class="line"> pCodecCtx-&gt;sample_fmt = AV_SAMPLE_FMT_FLTP; <span class="comment">//其他会出错</span></span><br><span class="line"> pCodecCtx-&gt;channel_layout = AV_CH_LAYOUT_STEREO;</span><br><span class="line"> pCodecCtx-&gt;channels = av_get_channel_layout_nb_channels(pCodecCtx-&gt;channel_layout);</span><br><span class="line"> pCodecCtx-&gt;sample_rate = <span class="number">44100</span>;</span><br><span class="line"> pCodecCtx-&gt;bit_rate = <span class="number">128000</span>;</span><br></pre></td></tr></table></figure><p>3.打开编码器并向输出文件中写入文件头信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">AVCodec *pCodec = avcodec_find_encoder(pCodecCtx-&gt;codec_id);</span><br><span class="line"><span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>)&#123;</span><br><span class="line">  av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to find codec\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (avcodec_open2(pCodecCtx,pCodec,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">  av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to open codec\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">av_dump_format(ofmt_ctx,<span class="number">0</span>,output,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (avio_open(&amp;ofmt_ctx-&gt;pb,output,AVIO_FLAG_WRITE) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">  av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to open output\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (avformat_write_header(ofmt_ctx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">  av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to write header&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.设置一些参数，需要将pcm raw data压缩为aac格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">AVFrame *pframe = av_frame_alloc();</span><br><span class="line"> pframe-&gt;channels = pCodecCtx-&gt;channels;</span><br><span class="line"> pframe-&gt;format = pCodecCtx-&gt;sample_fmt;</span><br><span class="line"> pframe-&gt;nb_samples = pCodecCtx-&gt;frame_size;</span><br><span class="line"> <span class="comment">//从文件中读取原始数据，缓冲区</span></span><br><span class="line"> <span class="keyword">int</span> size = av_samples_get_buffer_size(<span class="literal">NULL</span>,pCodecCtx-&gt;channels,pCodecCtx-&gt;frame_size,pCodecCtx-&gt;sample_fmt,<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span>*)av_malloc(size);</span><br><span class="line"> avcodec_fill_audio_frame(pframe,pCodecCtx-&gt;channels,pCodecCtx-&gt;sample_fmt,(<span class="keyword">const</span> <span class="keyword">uint8_t</span>*)out_buffer,size,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//新版本需要使用到转换参数，将读取的数据转换成输出的编码格式</span></span><br><span class="line"> <span class="keyword">uint8_t</span>  **data = (<span class="keyword">uint8_t</span>**)av_calloc( pCodecCtx-&gt;channels,<span class="keyword">sizeof</span>(*data) );</span><br><span class="line"> av_samples_alloc(data,<span class="literal">NULL</span>,pCodecCtx-&gt;channels,pCodecCtx-&gt;frame_size,pCodecCtx-&gt;sample_fmt,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"> SwrContext *pSwrCtx  = swr_alloc();</span><br><span class="line"> swr_alloc_set_opts(pSwrCtx,pCodecCtx-&gt;channel_layout,pCodecCtx-&gt;sample_fmt,pCodecCtx-&gt;sample_rate,</span><br><span class="line">     pCodecCtx-&gt;channel_layout,AV_SAMPLE_FMT_S16,<span class="number">44100</span>,<span class="number">0</span>,<span class="literal">NULL</span>);</span><br><span class="line"> swr_init(pSwrCtx);</span><br><span class="line"> <span class="comment">//需要使用AVPacket进行压缩储存</span></span><br><span class="line"> AVPacket *pkt = av_packet_alloc();</span><br><span class="line"> av_new_packet(pkt,size);</span><br><span class="line"> pkt-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line"> pkt-&gt;size = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>5.读取pcm raw data并压缩为aac格式的数据写入输出文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//读取的长度要 和原始数据的采样率，采样格式以及通道有关 如果size设置的不对，会导致音频错误</span></span><br><span class="line">    size = pframe-&gt;nb_samples * av_get_bytes_per_sample(AV_SAMPLE_FMT_S16) * pframe-&gt;channels;</span><br><span class="line">    <span class="keyword">if</span> (fread(out_buffer,<span class="number">1</span>,size,fp) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;fail to read raw data\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (feof(fp))&#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    swr_convert(pSwrCtx,data,pCodecCtx-&gt;frame_size,pframe-&gt;data,pframe-&gt;nb_samples);</span><br><span class="line">    <span class="comment">//转换后的数据大小与采样率和采样格式有关</span></span><br><span class="line">    size = pCodecCtx-&gt;frame_size * av_get_bytes_per_sample(pCodecCtx-&gt;sample_fmt);</span><br><span class="line">    <span class="built_in">memcpy</span>(pframe-&gt;data[<span class="number">0</span>],data[<span class="number">0</span>],size);</span><br><span class="line">    <span class="built_in">memcpy</span>(pframe-&gt;data[<span class="number">1</span>],data[<span class="number">1</span>],size);</span><br><span class="line">    pframe-&gt;pts = count * <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//编码写入</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_send_frame(pCodecCtx,pframe) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;fail to send frame\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取编码好的数据</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_receive_packet(pCodecCtx,pkt)  &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">      pkt-&gt;stream_index = out_stream-&gt;index;</span><br><span class="line">      av_log(<span class="literal">NULL</span>,AV_LOG_INFO,<span class="string">&quot;write %d frame\n&quot;</span>,count);</span><br><span class="line">      av_write_frame(ofmt_ctx,pkt);</span><br><span class="line">    &#125;</span><br><span class="line">    count++;</span><br><span class="line">    av_packet_unref(pkt);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>\6. 刷新编码器，将编码器中的数据写入到文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">flush_encoder</span><span class="params">(AVFormatContext *ofmt_ctx,<span class="keyword">int</span> stream_index)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(ofmt_ctx-&gt;streams[stream_index]-&gt;codec-&gt;codec-&gt;capabilities &amp; AV_CODEC_CAP_DELAY))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> got_fame = <span class="number">0</span>;</span><br><span class="line">  AVPacket *pkt = av_packet_alloc();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    pkt-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    pkt-&gt;size = <span class="number">0</span>;</span><br><span class="line">    av_init_packet(pkt);</span><br><span class="line">    <span class="keyword">int</span> ret = avcodec_encode_audio2(ofmt_ctx-&gt;streams[stream_index]-&gt;codec,pkt,<span class="literal">NULL</span>,&amp;got_fame);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (got_fame == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//mux the frame data</span></span><br><span class="line">    ret = av_write_frame(ofmt_ctx,pkt);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  av_packet_free(&amp;pkt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.写入文件尾部信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">av_write_trailer(ofmt_ctx);</span><br></pre></td></tr></table></figure><p>8.释放所有申请的资源</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">av_packet_free(&amp;pkt);</span><br><span class="line">swr_free(&amp;pSwrCtx);</span><br><span class="line">av_free(out_buffer);</span><br><span class="line">av_frame_free(&amp;pframe);</span><br><span class="line"></span><br><span class="line">avio_close(ofmt_ctx-&gt;pb);</span><br><span class="line">avformat_free_context(ofmt_ctx);</span><br></pre></td></tr></table></figure><p>完整代码实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswresample/swresample.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">flush_encoder</span><span class="params">(AVFormatContext *ofmt_ctx,<span class="keyword">int</span> stream_index)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(ofmt_ctx-&gt;streams[stream_index]-&gt;codec-&gt;codec-&gt;capabilities &amp; AV_CODEC_CAP_DELAY))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> got_fame = <span class="number">0</span>;</span><br><span class="line">  AVPacket *pkt = av_packet_alloc();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    pkt-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    pkt-&gt;size = <span class="number">0</span>;</span><br><span class="line">    av_init_packet(pkt);</span><br><span class="line">    <span class="keyword">int</span> ret = avcodec_encode_audio2(ofmt_ctx-&gt;streams[stream_index]-&gt;codec,pkt,<span class="literal">NULL</span>,&amp;got_fame);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (got_fame == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret = av_write_frame(ofmt_ctx,pkt);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  av_packet_free(&amp;pkt);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;usage : Encode &lt;input pcm data&gt; &lt;output aac&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *input = argv[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *output = argv[<span class="number">2</span>];</span><br><span class="line">  av_register_all();</span><br><span class="line">  AVFormatContext *ofmt_ctx = avformat_alloc_context();</span><br><span class="line">  AVOutputFormat *oformat = av_guess_format(<span class="literal">NULL</span>,output,<span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (oformat==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to find the output format\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (avformat_alloc_output_context2(&amp;ofmt_ctx,oformat,oformat-&gt;name,output) &lt;<span class="number">0</span>)&#123;</span><br><span class="line">    av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to alloc output context\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  AVStream *out_stream = avformat_new_stream(ofmt_ctx,<span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (out_stream == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to create new stream\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  AVCodecContext *pCodecCtx = out_stream-&gt;codec;</span><br><span class="line">  pCodecCtx-&gt;codec_id = oformat-&gt;audio_codec;</span><br><span class="line">  pCodecCtx-&gt;codec_type = AVMEDIA_TYPE_AUDIO;</span><br><span class="line">  pCodecCtx-&gt;sample_fmt = AV_SAMPLE_FMT_FLTP; <span class="comment">//其他会出错</span></span><br><span class="line">  pCodecCtx-&gt;channel_layout = AV_CH_LAYOUT_STEREO;</span><br><span class="line">  pCodecCtx-&gt;channels = av_get_channel_layout_nb_channels(pCodecCtx-&gt;channel_layout);</span><br><span class="line">  pCodecCtx-&gt;sample_rate = <span class="number">44100</span>;</span><br><span class="line">  pCodecCtx-&gt;bit_rate = <span class="number">128000</span>;</span><br><span class="line"></span><br><span class="line">  AVCodec *pCodec = avcodec_find_encoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">  <span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to find codec\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (avcodec_open2(pCodecCtx,pCodec,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to open codec\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  av_dump_format(ofmt_ctx,<span class="number">0</span>,output,<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (avio_open(&amp;ofmt_ctx-&gt;pb,output,AVIO_FLAG_WRITE) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to open output\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (avformat_write_header(ofmt_ctx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    av_log(<span class="literal">NULL</span>,AV_LOG_ERROR,<span class="string">&quot;fail to write header&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  FILE *fp = fopen(input,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fail to open file\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  AVFrame *pframe = av_frame_alloc();</span><br><span class="line">  pframe-&gt;channels = pCodecCtx-&gt;channels;</span><br><span class="line">  pframe-&gt;format = pCodecCtx-&gt;sample_fmt;</span><br><span class="line">  pframe-&gt;nb_samples = pCodecCtx-&gt;frame_size;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> size = av_samples_get_buffer_size(<span class="literal">NULL</span>,pCodecCtx-&gt;channels,pCodecCtx-&gt;frame_size,pCodecCtx-&gt;sample_fmt,<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span>*)av_malloc(size);</span><br><span class="line">  avcodec_fill_audio_frame(pframe,pCodecCtx-&gt;channels,pCodecCtx-&gt;sample_fmt,(<span class="keyword">const</span> <span class="keyword">uint8_t</span>*)out_buffer,size,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//新版本需要使用到转换参数，将读取的数据转换成输出的编码格式</span></span><br><span class="line">  <span class="keyword">uint8_t</span>  **data = (<span class="keyword">uint8_t</span>**)av_calloc( pCodecCtx-&gt;channels,<span class="keyword">sizeof</span>(*data) );</span><br><span class="line">  av_samples_alloc(data,<span class="literal">NULL</span>,pCodecCtx-&gt;channels,pCodecCtx-&gt;frame_size,pCodecCtx-&gt;sample_fmt,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  SwrContext *pSwrCtx  = swr_alloc();</span><br><span class="line">  swr_alloc_set_opts(pSwrCtx,pCodecCtx-&gt;channel_layout,pCodecCtx-&gt;sample_fmt,pCodecCtx-&gt;sample_rate,</span><br><span class="line">      pCodecCtx-&gt;channel_layout,AV_SAMPLE_FMT_S16,<span class="number">44100</span>,<span class="number">0</span>,<span class="literal">NULL</span>);</span><br><span class="line">  swr_init(pSwrCtx);</span><br><span class="line">  AVPacket *pkt = av_packet_alloc();</span><br><span class="line">  av_new_packet(pkt,size);</span><br><span class="line">  pkt-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">  pkt-&gt;size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//读取的长度要 和原始数据的采样率，采样格式以及通道有关 如果size设置的不对，会导致音频错误</span></span><br><span class="line">    size = pframe-&gt;nb_samples * av_get_bytes_per_sample(AV_SAMPLE_FMT_S16) * pframe-&gt;channels;</span><br><span class="line">    <span class="keyword">if</span> (fread(out_buffer,<span class="number">1</span>,size,fp) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;fail to read raw data\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (feof(fp))&#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    swr_convert(pSwrCtx,data,pCodecCtx-&gt;frame_size,pframe-&gt;data,pframe-&gt;nb_samples);</span><br><span class="line">    <span class="comment">//转换后的数据大小与采样率和采样格式有关</span></span><br><span class="line">    size = pCodecCtx-&gt;frame_size * av_get_bytes_per_sample(pCodecCtx-&gt;sample_fmt);</span><br><span class="line">    <span class="built_in">memcpy</span>(pframe-&gt;data[<span class="number">0</span>],data[<span class="number">0</span>],size);</span><br><span class="line">    <span class="built_in">memcpy</span>(pframe-&gt;data[<span class="number">1</span>],data[<span class="number">1</span>],size);</span><br><span class="line">    pframe-&gt;pts = count * <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//编码写入</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_send_frame(pCodecCtx,pframe) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;fail to send frame\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取编码好的数据</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_receive_packet(pCodecCtx,pkt)  &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">      pkt-&gt;stream_index = out_stream-&gt;index;</span><br><span class="line">      av_log(<span class="literal">NULL</span>,AV_LOG_INFO,<span class="string">&quot;write %d frame\n&quot;</span>,count);</span><br><span class="line">      av_write_frame(ofmt_ctx,pkt);</span><br><span class="line">    &#125;</span><br><span class="line">    count++;</span><br><span class="line">    av_packet_unref(pkt);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//刷新编码器的缓冲区</span></span><br><span class="line">  flush_encoder(ofmt_ctx,out_stream-&gt;index);</span><br><span class="line"></span><br><span class="line">  av_packet_free(&amp;pkt);</span><br><span class="line">  swr_free(&amp;pSwrCtx);</span><br><span class="line">  av_free(out_buffer);</span><br><span class="line">  av_frame_free(&amp;pframe);</span><br><span class="line">  av_write_trailer(ofmt_ctx);</span><br><span class="line">  avio_close(ofmt_ctx-&gt;pb);</span><br><span class="line">  avformat_free_context(ofmt_ctx);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我使用此代码将pcm转换到mp3的时候会出错，可能是我自己编译的ffmpeg有问题，不支持mp3格式的压缩。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;要将PCM数据编码为AAC的格式，&lt;/p&gt;</summary>
    
    
    
    
    <category term="FFMPEG" scheme="http://example.com/tags/FFMPEG/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg+SDL2播放视频</title>
    <link href="http://example.com/jsblog/e661981a.html"/>
    <id>http://example.com/jsblog/e661981a.html</id>
    <published>2020-12-20T04:17:42.000Z</published>
    <updated>2020-12-20T04:20:59.399Z</updated>
    
    <content type="html"><![CDATA[<p>从开始学习到现在自己制作使用SDL2播放视频，好像经历了一个月的时间，<a id="more"></a>终于可以不用去看别人的代码，从而自己实现一个使用FFMPEG解码，使用SDL2播放视频的程序了，一切付出都是有收获的，当然主要还是参考了雷神的博客，以前自己看了几遍也写过一遍，但是对流程代码的理解很浅，仅仅属于ctrl+c,ctrl+v的操作，现在不需要ctrl+c,ctrl+v,可以自己从头写出来一个简单的播放器了。(这里设置播放的数据为RGB)</p><p>流程图如下：</p><p>解码视频流程图：</p><p><img src="https://pic4.zhimg.com/80/v2-3d4d38fea7d8977ae199df2c3247cf4b_720w.jpg" alt="img"></p><p>播放视频流程图：</p><p><img src="https://pic3.zhimg.com/80/v2-6beb880c4025c2121a75dfe45beddd6e_720w.jpg" alt="img"></p><p>代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL2/SDL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/imgutils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswscale/swscale.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fresh</span><span class="params">(<span class="keyword">void</span> *data)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    SDL_Event event;</span><br><span class="line">    event.type = SDL_DISPLAYEVENT;</span><br><span class="line">    SDL_PushEvent(&amp;event);</span><br><span class="line">    SDL_Delay(<span class="number">40</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Usage : player &lt;input&gt;&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *input = argv[<span class="number">1</span>];</span><br><span class="line">  AVFormatContext *ifmt_ctx = avformat_alloc_context();</span><br><span class="line">  <span class="keyword">if</span> (avformat_open_input(&amp;ifmt_ctx, input, <span class="literal">NULL</span>, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to open input &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (avformat_find_stream_info(ifmt_ctx, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to find stream info&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//将音视频信息输出到控制台</span></span><br><span class="line">  av_dump_format(ifmt_ctx, <span class="number">0</span>, input, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//找到视频流</span></span><br><span class="line">  <span class="keyword">int</span> video_stream_index = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ifmt_ctx-&gt;nb_streams; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ifmt_ctx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO) &#123;</span><br><span class="line">      video_stream_index = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (video_stream_index == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to find video stream&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  AVCodecContext *pCodecCtx = ifmt_ctx-&gt;streams[video_stream_index]-&gt;codec;</span><br><span class="line">  AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">  <span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to find the codec&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; fail to open codec &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//初始化转换参数</span></span><br><span class="line">  AVFrame *pframe = av_frame_alloc();</span><br><span class="line">  AVFrame *pframeRGB = av_frame_alloc();</span><br><span class="line">  <span class="keyword">uint8_t</span> *out_buff = (<span class="keyword">uint8_t</span> *)av_malloc(av_image_get_buffer_size(</span><br><span class="line">      AV_PIX_FMT_RGB24, pCodecCtx-&gt;width, pCodecCtx-&gt;height, <span class="number">1</span>));</span><br><span class="line">  av_image_fill_arrays(pframeRGB-&gt;data, pframeRGB-&gt;linesize, out_buff,</span><br><span class="line">                       AV_PIX_FMT_RGB24, pCodecCtx-&gt;width, pCodecCtx-&gt;height,</span><br><span class="line">                       <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  SwsContext *pSwsCtx = sws_alloc_context();</span><br><span class="line">  pSwsCtx = sws_getContext(</span><br><span class="line">      pCodecCtx-&gt;width, pCodecCtx-&gt;height, pCodecCtx-&gt;pix_fmt, pCodecCtx-&gt;width,</span><br><span class="line">      pCodecCtx-&gt;height, AV_PIX_FMT_RGB24, SWS_BICUBIC, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//初始化SDL</span></span><br><span class="line">    <span class="keyword">if</span>(SDL_Init(SDL_INIT_EVERYTHING))&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to init sdl&quot;</span> &lt;&lt; SDL_GetError() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SDL_Window *p_window = SDL_CreateWindow(<span class="string">&quot;Player&quot;</span>,SDL_WINDOWPOS_UNDEFINED,SDL_WINDOWPOS_UNDEFINED,pCodecCtx-&gt;width,pCodecCtx-&gt;height,SDL_WINDOW_RESIZABLE);</span><br><span class="line">    <span class="keyword">if</span> (p_window  == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to create SDL window &quot;</span> &lt;&lt;SDL_GetError()  &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SDL_Renderer *p_renderer  = SDL_CreateRenderer(p_window,<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> (p_renderer  == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to create SDL render &quot;</span> &lt;&lt; SDL_GetError() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SDL_Rect rect;</span><br><span class="line"></span><br><span class="line">    rect.x = <span class="number">0</span>;</span><br><span class="line">    rect.y = <span class="number">0</span>;</span><br><span class="line">    rect.w = pCodecCtx-&gt;width;</span><br><span class="line">    rect.h = pCodecCtx-&gt;height;</span><br><span class="line"></span><br><span class="line">    SDL_Texture *p_texture = SDL_CreateTexture(p_renderer,SDL_PIXELFORMAT_RGB24,SDL_TEXTUREACCESS_STREAMING,pCodecCtx-&gt;width,pCodecCtx-&gt;height);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//读取数据</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; pCodecCtx-&gt;width &lt;&lt; pCodecCtx-&gt;height &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  AVPacket *pkt = av_packet_alloc();</span><br><span class="line">  av_init_packet(pkt);</span><br><span class="line">  <span class="keyword">int</span> got_frame = <span class="number">-1</span>;</span><br><span class="line">  <span class="comment">//SDL 线程播放</span></span><br><span class="line">  SDL_Thread *p_thread = SDL_CreateThread(fresh,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    SDL_Event event;</span><br><span class="line">    SDL_WaitEvent(&amp;event);</span><br><span class="line">    <span class="keyword">if</span> (event.type == SDL_DISPLAYEVENT) &#123;</span><br><span class="line">      <span class="keyword">if</span> (av_read_frame(ifmt_ctx, pkt) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pkt-&gt;stream_index == video_stream_index) &#123;</span><br><span class="line">          <span class="keyword">int</span> ret = avcodec_decode_video2(pCodecCtx, pframe, &amp;got_frame, pkt);</span><br><span class="line">          <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (got_frame &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sws_scale(pSwsCtx, (<span class="keyword">const</span> <span class="keyword">uint8_t</span> *<span class="keyword">const</span> *)pframe-&gt;data,</span><br><span class="line">                      pframe-&gt;linesize, <span class="number">0</span>, pCodecCtx-&gt;height, pframeRGB-&gt;data,</span><br><span class="line">                      pframeRGB-&gt;linesize);</span><br><span class="line"></span><br><span class="line">            SDL_UpdateTexture(p_texture, &amp;rect, pframeRGB-&gt;data[<span class="number">0</span>],</span><br><span class="line">                              pframeRGB-&gt;linesize[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            SDL_RenderClear(p_renderer);</span><br><span class="line">            SDL_RenderCopy(p_renderer, p_texture, <span class="literal">NULL</span>, &amp;rect);</span><br><span class="line">            SDL_RenderPresent(p_renderer);</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">          av_packet_unref(pkt);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (event.type == SDL_QUIT)&#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  SDL_DestroyTexture(p_texture);</span><br><span class="line">  SDL_DestroyWindow(p_window);</span><br><span class="line">  SDL_DestroyRenderer(p_renderer);</span><br><span class="line">  SDL_Quit();</span><br><span class="line">  av_packet_free(&amp;pkt);</span><br><span class="line">  sws_freeContext(pSwsCtx);</span><br><span class="line">  av_frame_free(&amp;pframe);</span><br><span class="line">  av_frame_free(&amp;pframeRGB);</span><br><span class="line">  avformat_close_input(&amp;ifmt_ctx);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;从开始学习到现在自己制作使用SDL2播放视频，好像经历了一个月的时间，&lt;/p&gt;</summary>
    
    
    
    
    <category term="FFMPEG" scheme="http://example.com/tags/FFMPEG/"/>
    
  </entry>
  
  <entry>
    <title>Qt+FFmpeg播放视频</title>
    <link href="http://example.com/jsblog/ca5cce0b.html"/>
    <id>http://example.com/jsblog/ca5cce0b.html</id>
    <published>2020-12-20T04:16:30.000Z</published>
    <updated>2020-12-20T04:20:59.401Z</updated>
    
    <content type="html"><![CDATA[<p>实践出真知。通过实践才能发现更多的问题。<a id="more"></a>在学习新的技术的时候也是这样。今天通过学习FFmpeg解码视频，实现一个Qt 和ffmpeg播放视频的小栗子。当然刚开始学习难免会到网上查询一下资料，然后结合自己的理解重新实现一下。具体参考哪一篇文章，我似乎也不记得了，但我记得还是好多东西都是参考雷神的博客才一步一步实践出来的。如果要学习音视频开发一定要去看雷神的博客。</p><p>说了太多废话，看一下如何配置环境。由于是在Qt中开发的，所以需要安装Qt,而IDE自然是使用QtCreator，如果你要使用visual studio，那么我也不能强求你。接下来是下载FFmpeg的库文件，可以直接去官网ffmpeg的官网下载，那里有着丰富的介绍，可惜的是我没有找到过中文版的文档。它会给你指出两个windows下可以使用的别人编译好的ffmpeg的库文件。</p><p>首先使用QtCreator创建一个项目，我把它命名为videoplayer，虽然能播放视频，但没有声音，而且播放速度还很快。在Qt项目管理配置pro文件中,添加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INCLUDEPATH +&#x3D; D:&#x2F;ffmpeg&#x2F;include</span><br><span class="line">LIBS +&#x3D; -LD:&#x2F;ffmpeg&#x2F;lib&#x2F; -lavutil -lavformat -lavcodec -lavdevice -lavfilter -lswresample -lswscale -lpostproc</span><br></pre></td></tr></table></figure><p>以上两行，目的是为了添加ffmpeg的头文件，在链接的时候链接到ffmpeg的库文件。</p><p>首先是界面设计 如下（很简单）：</p><p><img src="https://pic4.zhimg.com/80/v2-08fa9ce8802e394726fd51bebc936cf7_720w.jpg" alt="img"></p><p>打开文件，就是让你选择一个文件，播放就是播放视频，而TextLabel则是为了显示解码出的一帧帧图像。</p><p>流程图如下：</p><p><img src="https://pic3.zhimg.com/80/v2-1891686cf230056632759f3b52388c9a_720w.jpg" alt="img"></p><p>部分代码讲解如下：</p><p>打开解码视频文件并绑定AVFormatContext,并找到其中流信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AVFormatContext *pFormatCtx = avformat_alloc_context();</span><br><span class="line">   <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx,input_file.c_str(),<span class="literal">nullptr</span>,<span class="literal">nullptr</span>) &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       qDebug() &lt;&lt; <span class="string">&quot;fail to find the stream\n&quot;</span>;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       qDebug() &lt;&lt; <span class="string">&quot;fail to find the stream info\n&quot;</span>;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// av_dump_format(pFormatCtx,0,input_file.c_str(),0);</span></span><br></pre></td></tr></table></figure><p>打开解码器，设置转换解码参数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[video_stream_index]-&gt;codec;</span><br><span class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">    <span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot;fail to find the decoder\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx,pCodec,<span class="literal">nullptr</span>) &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot;fail to open the decodec\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//展示图像</span></span><br><span class="line">    AVFrame *pFrame = av_frame_alloc();</span><br><span class="line">    AVFrame *pframeRGB = av_frame_alloc();</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *out_buffer = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)av_malloc(av_image_get_buffer_size(AV_PIX_FMT_RGB32,pCodecCtx-&gt;width,pCodecCtx-&gt;height,<span class="number">1</span>));</span><br><span class="line">    av_image_fill_arrays(pframeRGB-&gt;data,pframeRGB-&gt;linesize,out_buffer,AV_PIX_FMT_RGB32,pCodecCtx-&gt;width,pCodecCtx-&gt;height,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    AVPacket *pkt = av_packet_alloc();</span><br><span class="line">    av_init_packet(pkt);</span><br><span class="line">    SwsContext *pSwsCtx = sws_alloc_context();</span><br><span class="line">    pSwsCtx = sws_getContext(pCodecCtx-&gt;width,pCodecCtx-&gt;height,pCodecCtx-&gt;pix_fmt,</span><br><span class="line">                             pCodecCtx-&gt;width,pCodecCtx-&gt;height,AV_PIX_FMT_RGB32,</span><br><span class="line">                             SWS_BICUBIC,<span class="literal">nullptr</span>,<span class="literal">nullptr</span>,<span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure><p>读取每一帧并播放：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> got_frame = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(av_read_frame(pFormatCtx,pkt) &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pkt-&gt;stream_index == video_stream_index)&#123;</span><br><span class="line">            <span class="keyword">int</span> ret = avcodec_decode_video2(pCodecCtx,pFrame,&amp;got_frame,pkt);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt; <span class="string">&quot;fail to decode video\n&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="keyword">if</span> (got_frame &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sws_scale(pSwsCtx,(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* <span class="keyword">const</span>*)pFrame-&gt;data,pFrame-&gt;linesize,<span class="number">0</span>,pCodecCtx-&gt;height,pframeRGB-&gt;data,pframeRGB-&gt;linesize);</span><br><span class="line">                QImage image = QImage((<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pframeRGB-&gt;data[<span class="number">0</span>],pCodecCtx-&gt;width,pCodecCtx-&gt;height,QImage::Format_RGB32,<span class="literal">nullptr</span>,<span class="literal">nullptr</span>);</span><br><span class="line">                ui-&gt;Canvas-&gt;setPixmap(QPixmap::fromImage(image));</span><br><span class="line">                Delay(<span class="number">3000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        av_packet_unref(pkt);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>实现代码如下：</p><p>widget.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QImage&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line">Widget::Widget(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">    , ui(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    connect(ui-&gt;OpenFile,SIGNAL(clicked()),<span class="keyword">this</span>,SLOT(OpenFile()));</span><br><span class="line">    connect(ui-&gt;Play,SIGNAL(clicked()),<span class="keyword">this</span>,SLOT(Play()));</span><br><span class="line">&#125;</span><br><span class="line">Widget::~Widget()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Widget::OpenFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString filter = tr(<span class="string">&quot;mp4 file(*.mp4);;rmvb file(*.rmvb);;avi file(*.avi)&quot;</span>);</span><br><span class="line">    filePath_ = QFileDialog::getOpenFileName(<span class="keyword">this</span>,tr(<span class="string">&quot;打开文件&quot;</span>),QString(),filter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Widget::Play</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (filePath_.isEmpty())</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::warning(<span class="literal">nullptr</span>,tr(<span class="string">&quot;warn&quot;</span>),tr(<span class="string">&quot;未选择文件&quot;</span>),QMessageBox::Ok);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> input_file=filePath_.toStdString();</span><br><span class="line">    <span class="comment">//注册编解码器</span></span><br><span class="line">    av_register_all();</span><br><span class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</span><br><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx,input_file.c_str(),<span class="literal">nullptr</span>,<span class="literal">nullptr</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot;fail to find the stream\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot;fail to find the stream info\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// av_dump_format(pFormatCtx,0,input_file.c_str(),0);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> video_stream_index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i =<span class="number">0</span>;i &lt; pFormatCtx-&gt;nb_streams ;++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</span><br><span class="line">        &#123;</span><br><span class="line">            video_stream_index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (video_stream_index == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot;fail to find the video stream&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[video_stream_index]-&gt;codec;</span><br><span class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">    <span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot;fail to find the decoder\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx,pCodec,<span class="literal">nullptr</span>) &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot;fail to open the decodec\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//展示图像</span></span><br><span class="line">    AVFrame *pFrame = av_frame_alloc();</span><br><span class="line">    AVFrame *pframeRGB = av_frame_alloc();</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *out_buffer = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)av_malloc(av_image_get_buffer_size(AV_PIX_FMT_RGB32,pCodecCtx-&gt;width,pCodecCtx-&gt;height,<span class="number">1</span>));</span><br><span class="line">    av_image_fill_arrays(pframeRGB-&gt;data,pframeRGB-&gt;linesize,out_buffer,AV_PIX_FMT_RGB32,pCodecCtx-&gt;width,pCodecCtx-&gt;height,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    AVPacket *pkt = av_packet_alloc();</span><br><span class="line">    av_init_packet(pkt);</span><br><span class="line">    SwsContext *pSwsCtx = sws_alloc_context();</span><br><span class="line">    pSwsCtx = sws_getContext(pCodecCtx-&gt;width,pCodecCtx-&gt;height,pCodecCtx-&gt;pix_fmt,</span><br><span class="line">                             pCodecCtx-&gt;width,pCodecCtx-&gt;height,AV_PIX_FMT_RGB32,</span><br><span class="line">                             SWS_BICUBIC,<span class="literal">nullptr</span>,<span class="literal">nullptr</span>,<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> got_frame = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(av_read_frame(pFormatCtx,pkt) &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pkt-&gt;stream_index == video_stream_index)&#123;</span><br><span class="line">            <span class="keyword">int</span> ret = avcodec_decode_video2(pCodecCtx,pFrame,&amp;got_frame,pkt);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt; <span class="string">&quot;fail to decode video\n&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="keyword">if</span> (got_frame &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sws_scale(pSwsCtx,(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* <span class="keyword">const</span>*)pFrame-&gt;data,pFrame-&gt;linesize,<span class="number">0</span>,pCodecCtx-&gt;height,pframeRGB-&gt;data,pframeRGB-&gt;linesize);</span><br><span class="line">                QImage image = QImage((<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pframeRGB-&gt;data[<span class="number">0</span>],pCodecCtx-&gt;width,pCodecCtx-&gt;height,QImage::Format_RGB32,<span class="literal">nullptr</span>,<span class="literal">nullptr</span>);</span><br><span class="line">                ui-&gt;Canvas-&gt;setPixmap(QPixmap::fromImage(image));</span><br><span class="line">                Delay(<span class="number">3000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        av_packet_unref(pkt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sws_freeContext(pSwsCtx);</span><br><span class="line">    av_packet_free(&amp;pkt);</span><br><span class="line">    avformat_close_input(&amp;pFormatCtx);</span><br><span class="line">    avformat_free_context(pFormatCtx);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Widget::Delay</span><span class="params">(<span class="keyword">int</span> delay)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QTime deadTime = QTime::currentTime().addMSecs(delay);</span><br><span class="line">    <span class="keyword">if</span> (QTime::currentTime() &lt; deadTime)</span><br><span class="line">        QCoreApplication::processEvents(QEventLoop::AllEvents,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>widget.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/imgutils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswresample/swresample.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswscale/swscale.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="class"><span class="keyword">class</span> <span class="title">Widget</span>;</span> &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Widget(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~Widget();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(<span class="keyword">int</span> delay)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OpenFile</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Play</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">    QString filePath_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    Widget w;</span><br><span class="line">    w.show();</span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;实践出真知。通过实践才能发现更多的问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="FFMPEG" scheme="http://example.com/tags/FFMPEG/"/>
    
  </entry>
  
  <entry>
    <title>提取RGB数据</title>
    <link href="http://example.com/jsblog/ba4deb51.html"/>
    <id>http://example.com/jsblog/ba4deb51.html</id>
    <published>2020-12-20T04:15:32.000Z</published>
    <updated>2020-12-20T04:20:59.406Z</updated>
    
    <content type="html"><![CDATA[<p>学习需要一步一步来，前几天在网上找了一个demo学习了如何在Qt中使用FFMPEG将视频数据解码出来并播放，<a id="more"></a>但是当时有好多细节不是很明白，于是便深入的学习一下如何将一个mv中的原始的数据读取出来，仅仅是读取视频数据的每一帧而不是音频数据，利用FFmpeg可以从mv中导出音频数据，有命令可以使用，当然也可以编码实现。</p><p>现在主要是来讲一下如何使用FFMPEG将音频中的原始数据读出并使用sws_scale将其转换为RGB数据，并写入到文件中。</p><p>流程图如下：</p><p><img src="https://pic2.zhimg.com/80/v2-662b3d2e4d44fc2f8181c582417cc18d_720w.jpg" alt="img"></p><p>代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/avfilter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/avutil.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/imgutils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavdevice/avdevice.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswscale/swscale.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswresample/swresample.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Usage : convert &lt;input&gt; &lt;output&gt;&quot;</span> &lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * input_video = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *output_rgb = argv[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//注册解码器</span></span><br><span class="line">    av_register_all();</span><br><span class="line">    avformat_network_init();</span><br><span class="line">    <span class="comment">//创建avformatcontext</span></span><br><span class="line">    AVFormatContext *ifmt_ctx = avformat_alloc_context();</span><br><span class="line">    <span class="keyword">if</span>(avformat_open_input(&amp;ifmt_ctx,input_video,<span class="literal">NULL</span>,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to open the stream\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到文件中的流信息</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(ifmt_ctx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to find the stream\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将输入文件的编码信息输出</span></span><br><span class="line">    av_dump_format(ifmt_ctx,<span class="number">0</span>,input_video,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//找到视频流</span></span><br><span class="line">    <span class="keyword">int</span> video_stream_index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ifmt_ctx-&gt;nb_streams ; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ifmt_ctx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO)&#123;</span><br><span class="line">            video_stream_index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (video_stream_index == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to find video stream\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到相应的编解码器</span></span><br><span class="line">    AVCodecContext *pCodecCtx = ifmt_ctx-&gt;streams[video_stream_index]-&gt;codec;</span><br><span class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">    <span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to find codec\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx,pCodec,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;fail to open codec\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出文件</span></span><br><span class="line">    FILE *fp = fopen(output_rgb,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line"></span><br><span class="line">    AVFrame *pframe = av_frame_alloc();</span><br><span class="line">    AVFrame *pframeRGB = av_frame_alloc();</span><br><span class="line">    <span class="comment">//设置输出缓冲区</span></span><br><span class="line">    <span class="keyword">uint8_t</span>  *outBuffer = (<span class="keyword">uint8_t</span>*)av_malloc(av_image_get_buffer_size(AV_PIX_FMT_RGB24,pCodecCtx-&gt;width,pCodecCtx-&gt;height,<span class="number">1</span>));</span><br><span class="line">    av_image_fill_arrays(pframeRGB-&gt;data,pframeRGB-&gt;linesize,outBuffer,AV_PIX_FMT_RGB24,pCodecCtx-&gt;width,pCodecCtx-&gt;height,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//需要使用sws_scale进行转换</span></span><br><span class="line">    SwsContext *pSwsCtx = sws_alloc_context();</span><br><span class="line">    <span class="comment">//转换的参数设置</span></span><br><span class="line">    pSwsCtx = sws_getContext(pCodecCtx-&gt;width,pCodecCtx-&gt;height,pCodecCtx-&gt;pix_fmt,</span><br><span class="line">            pCodecCtx-&gt;width,pCodecCtx-&gt;height,AV_PIX_FMT_RGB24,SWS_BICUBIC,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    AVPacket *pkt = av_packet_alloc();</span><br><span class="line">    av_init_packet(pkt);</span><br><span class="line">    <span class="keyword">int</span> got_frame = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(av_read_frame(ifmt_ctx,pkt) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (pkt-&gt;stream_index == video_stream_index)&#123;</span><br><span class="line">            <span class="comment">//解码</span></span><br><span class="line">            <span class="keyword">int</span> ret = avcodec_decode_video2(pCodecCtx,pframe,&amp;got_frame,pkt);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (got_frame &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                sws_scale(pSwsCtx,(<span class="keyword">const</span> <span class="keyword">uint8_t</span>* <span class="keyword">const</span>*)pframe-&gt;data,pframe-&gt;linesize,<span class="number">0</span>,pframe-&gt;height,pframeRGB-&gt;data,pframeRGB-&gt;linesize);</span><br><span class="line">                <span class="comment">//将数据以二进制的形式写入文件中</span></span><br><span class="line">                fwrite(pframeRGB-&gt;data[<span class="number">0</span>],pCodecCtx-&gt;height * pCodecCtx-&gt;width*<span class="number">3</span>,<span class="number">1</span>,fp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放所有申请的资源，并关闭打开的资源</span></span><br><span class="line">    sws_freeContext(pSwsCtx);</span><br><span class="line">    av_frame_free(&amp;pframe);</span><br><span class="line">    av_frame_free(&amp;pframeRGB);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    avformat_close_input(&amp;ifmt_ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习需要一步一步来，前几天在网上找了一个demo学习了如何在Qt中使用FFMPEG将视频数据解码出来并播放，&lt;/p&gt;</summary>
    
    
    
    
    <category term="FFMPEG" scheme="http://example.com/tags/FFMPEG/"/>
    
  </entry>
  
  <entry>
    <title>格式转换</title>
    <link href="http://example.com/jsblog/380b57e8.html"/>
    <id>http://example.com/jsblog/380b57e8.html</id>
    <published>2020-12-20T04:14:46.000Z</published>
    <updated>2020-12-20T04:20:59.407Z</updated>
    
    <content type="html"><![CDATA[<p>学习了一部分ffmpeg的知识，但是没有目标的学习似乎好像学不到什么东西。<a id="more"></a>尤其是编程方面。想找一些例子来做，看着别人的博客却提不起兴趣来做。当自己有了一个目标的时候才会充满动力，在了解了一些音视频的知识之后，才知道原来各种音视频的格式不是靠改个后缀名就能改变其编码格式的。于是便想实现一个格式转换的程序，来完成格式的转换。当然我也是只是测试了视频的转换，并没有测试音频的转换。</p><p>对于格式的转换其实就是对于要转换的文件首先进行解封装，然后再通过要转换的格式的编解码器进行封装，最后将数据写入目标文件。</p><p>其流程图如下：</p><p><img src="https://pic3.zhimg.com/80/v2-cd2a84df9b838ca6c09257a86ece98be_720w.jpg" alt="img"></p><p>格式转换代码流程图如下：</p><p><img src="https://pic4.zhimg.com/80/v2-30ef33fecc28bf594da9b36ed28b3c2f_720w.jpg" alt="img"></p><p><strong>实现部分</strong></p><p>先从输入文件中读取数据以及数据的信息：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">av_register_all();</span><br><span class="line">AVFormatContext *ifmt_ctx = avformat_alloc_context();</span><br><span class="line"><span class="keyword">if</span> (avformat_open_input(&amp;ifmt_ctx,input_file,<span class="literal">NULL</span>,<span class="literal">NULL</span>) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to open the input file &quot;</span> &lt;&lt; input_file &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (avformat_find_stream_info(ifmt_ctx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to find the stream information &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示解码信息</span></span><br><span class="line">av_dump_format(ifmt_ctx,<span class="number">0</span>,input_file,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>根据输出文件的格式，得到输出文件的解码格式，如果输出文件没有扩展名，则会出错：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AVOutputFormat *out_fmt = av_guess_format(<span class="literal">NULL</span>,output_file,<span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (out_fmt == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to find the format&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  AVFormatContext *ofmt_ctx = avformat_alloc_context();</span><br><span class="line">  <span class="keyword">if</span> (avformat_alloc_output_context2(&amp;ofmt_ctx,out_fmt,out_fmt-&gt;name,output_file) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to alloc the output context&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>将各种流的编解码参数设置到输出Context中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; ifmt_ctx-&gt;nb_streams;i++)&#123;</span><br><span class="line">        <span class="comment">//找到解码器</span></span><br><span class="line">        AVStream *input_stream = ifmt_ctx-&gt;streams[i];</span><br><span class="line">        AVCodec *pCodec = avcodec_find_decoder(input_stream-&gt;codecpar-&gt;codec_id);</span><br><span class="line">        <span class="comment">//定义输出参数</span></span><br><span class="line">        AVStream *out_stream = avformat_new_stream(ofmt_ctx,pCodec);</span><br><span class="line">        <span class="keyword">if</span> (out_stream == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to create the out stream &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//复制解码参数</span></span><br><span class="line">        <span class="keyword">if</span> (avcodec_parameters_copy(out_stream-&gt;codecpar,input_stream-&gt;codecpar) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to copy parameters &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        out_stream-&gt;codecpar-&gt;codec_tag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ofmt_ctx-&gt;oformat-&gt;flags &amp; AVFMT_GLOBALHEADER)</span><br><span class="line">            out_stream-&gt;codec-&gt;flags |= AV_CODEC_FLAG_GLOBAL_HEADER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出信息</span></span><br><span class="line">    av_dump_format(ofmt_ctx,<span class="number">0</span>,output_file,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>打开输出文件，并写入数据，写写入头信息，最后写入尾部信息：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(out_fmt-&gt;flags &amp;AVFMT_NOFILE)) &#123;</span><br><span class="line">       <span class="keyword">if</span> (avio_open(&amp;ofmt_ctx-&gt;pb, output_file, AVIO_FLAG_WRITE) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to open the avio context&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//写入信息头</span></span><br><span class="line">   <span class="keyword">if</span> (avformat_write_header(ofmt_ctx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to write header&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   AVPacket *pkt = av_packet_alloc();</span><br><span class="line">   av_init_packet(pkt);</span><br><span class="line">   <span class="keyword">int</span> frame_index = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//转换avi需要使用bsf，如果不使用这个会转换失败</span></span><br><span class="line">   AVBitStreamFilterContext *bsf = av_bitstream_filter_init(<span class="string">&quot;h264_mp4toannexb&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span>(av_read_frame(ifmt_ctx,pkt) &gt;=<span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       AVStream *in_steam,*out_stream;</span><br><span class="line">       in_steam = ifmt_ctx-&gt;streams[pkt-&gt;stream_index];</span><br><span class="line">       out_stream = ofmt_ctx-&gt;streams[pkt-&gt;stream_index];</span><br><span class="line">       pkt-&gt;pts = av_rescale_q_rnd(pkt-&gt;pts,in_steam-&gt;time_base,out_stream-&gt;time_base,(AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX));</span><br><span class="line">       pkt-&gt;dts = av_rescale_q_rnd(pkt-&gt;dts,in_steam-&gt;time_base,out_stream-&gt;time_base,(AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX));</span><br><span class="line">       pkt-&gt;duration = av_rescale_q(pkt-&gt;duration,in_steam-&gt;time_base,out_stream-&gt;time_base);</span><br><span class="line">       pkt-&gt;pos = <span class="number">-1</span>;</span><br><span class="line">       <span class="keyword">if</span> (pkt-&gt;stream_index == <span class="number">0</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           AVPacket *fpkt = av_packet_alloc();</span><br><span class="line">           <span class="keyword">int</span> test = av_bitstream_filter_filter(bsf,in_steam-&gt;codec,<span class="literal">NULL</span>,&amp;fpkt-&gt;data,&amp;fpkt-&gt;size,</span><br><span class="line">                   pkt-&gt;data,pkt-&gt;size,pkt-&gt;flags | AV_PKT_FLAG_KEY);</span><br><span class="line">           pkt-&gt;data = fpkt-&gt;data;</span><br><span class="line">           pkt-&gt;size = fpkt-&gt;size;</span><br><span class="line">           av_packet_free(&amp;fpkt);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (av_interleaved_write_frame(ofmt_ctx,pkt) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to write&quot;</span> &lt;&lt; frame_index &lt;&lt;<span class="string">&quot; frame&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">           <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       av_packet_unref(pkt);</span><br><span class="line">       frame_index ++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//写入文件尾部信息</span></span><br><span class="line">   <span class="keyword">if</span> (av_write_trailer(ofmt_ctx) &lt; <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to write trailer &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>释放所有申请的资源，关闭打开的环境：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">av_bitstream_filter_close(bsf);</span><br><span class="line">    <span class="keyword">if</span> (ofmt_ctx &amp;&amp; !(out_fmt-&gt;flags &amp; AVFMT_NOFILE))</span><br><span class="line">        avio_close(ofmt_ctx-&gt;pb);</span><br><span class="line">    av_packet_free(&amp;pkt);</span><br><span class="line">    avformat_close_input(&amp;ifmt_ctx);</span><br><span class="line">    avformat_free_context(ifmt_ctx);</span><br></pre></td></tr></table></figure><p>所有代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/avutil.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswresample/swresample.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/avfilter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;usage :convert &lt;input&gt; &lt;output&gt;&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* input_file = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* output_file = argv[<span class="number">2</span>];</span><br><span class="line">    av_register_all();</span><br><span class="line">    AVFormatContext *ifmt_ctx = avformat_alloc_context();</span><br><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;ifmt_ctx,input_file,<span class="literal">NULL</span>,<span class="literal">NULL</span>) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to open the input file &quot;</span> &lt;&lt; input_file &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(ifmt_ctx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to find the stream information &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示解码信息</span></span><br><span class="line">    av_dump_format(ifmt_ctx,<span class="number">0</span>,input_file,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//输出设置</span></span><br><span class="line">    AVOutputFormat *out_fmt = av_guess_format(<span class="literal">NULL</span>,output_file,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (out_fmt == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to find the format&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    AVFormatContext *ofmt_ctx = avformat_alloc_context();</span><br><span class="line">    <span class="keyword">if</span> (avformat_alloc_output_context2(&amp;ofmt_ctx,out_fmt,out_fmt-&gt;name,output_file) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to alloc the output context&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; ifmt_ctx-&gt;nb_streams;i++)&#123;</span><br><span class="line">        <span class="comment">//找到解码器</span></span><br><span class="line">        AVStream *input_stream = ifmt_ctx-&gt;streams[i];</span><br><span class="line">        AVCodec *pCodec = avcodec_find_decoder(input_stream-&gt;codecpar-&gt;codec_id);</span><br><span class="line">        <span class="comment">//定义输出参数</span></span><br><span class="line">        AVStream *out_stream = avformat_new_stream(ofmt_ctx,pCodec);</span><br><span class="line">        <span class="keyword">if</span> (out_stream == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to create the out stream &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//复制解码参数</span></span><br><span class="line">        <span class="keyword">if</span> (avcodec_parameters_copy(out_stream-&gt;codecpar,input_stream-&gt;codecpar) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to copy parameters &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        out_stream-&gt;codecpar-&gt;codec_tag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ofmt_ctx-&gt;oformat-&gt;flags &amp; AVFMT_GLOBALHEADER)</span><br><span class="line">            out_stream-&gt;codec-&gt;flags |= AV_CODEC_FLAG_GLOBAL_HEADER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出信息</span></span><br><span class="line">    av_dump_format(ofmt_ctx,<span class="number">0</span>,output_file,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(out_fmt-&gt;flags &amp;AVFMT_NOFILE)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (avio_open(&amp;ofmt_ctx-&gt;pb, output_file, AVIO_FLAG_WRITE) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to open the avio context&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写入信息头</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_write_header(ofmt_ctx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to write header&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    AVPacket *pkt = av_packet_alloc();</span><br><span class="line">    av_init_packet(pkt);</span><br><span class="line">    <span class="keyword">int</span> frame_index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//转换avi需要使用bsf</span></span><br><span class="line">    AVBitStreamFilterContext *bsf = av_bitstream_filter_init(<span class="string">&quot;h264_mp4toannexb&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(av_read_frame(ifmt_ctx,pkt) &gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        AVStream *in_steam,*out_stream;</span><br><span class="line">        in_steam = ifmt_ctx-&gt;streams[pkt-&gt;stream_index];</span><br><span class="line">        out_stream = ofmt_ctx-&gt;streams[pkt-&gt;stream_index];</span><br><span class="line">        pkt-&gt;pts = av_rescale_q_rnd(pkt-&gt;pts,in_steam-&gt;time_base,out_stream-&gt;time_base,(AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX));</span><br><span class="line">        pkt-&gt;dts = av_rescale_q_rnd(pkt-&gt;dts,in_steam-&gt;time_base,out_stream-&gt;time_base,(AVRounding)(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX));</span><br><span class="line">        pkt-&gt;duration = av_rescale_q(pkt-&gt;duration,in_steam-&gt;time_base,out_stream-&gt;time_base);</span><br><span class="line">        pkt-&gt;pos = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pkt-&gt;stream_index == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            AVPacket *fpkt = av_packet_alloc();</span><br><span class="line">            <span class="keyword">int</span> test = av_bitstream_filter_filter(bsf,in_steam-&gt;codec,<span class="literal">NULL</span>,&amp;fpkt-&gt;data,&amp;fpkt-&gt;size,</span><br><span class="line">                    pkt-&gt;data,pkt-&gt;size,pkt-&gt;flags | AV_PKT_FLAG_KEY);</span><br><span class="line">            pkt-&gt;data = fpkt-&gt;data;</span><br><span class="line">            pkt-&gt;size = fpkt-&gt;size;</span><br><span class="line">            av_packet_free(&amp;fpkt);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (av_interleaved_write_frame(ofmt_ctx,pkt) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to write&quot;</span> &lt;&lt; frame_index &lt;&lt;<span class="string">&quot; frame&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        av_packet_unref(pkt);</span><br><span class="line">        frame_index ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写入文件尾部信息</span></span><br><span class="line">    <span class="keyword">if</span> (av_write_trailer(ofmt_ctx) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;fail to write trailer &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    av_bitstream_filter_close(bsf);</span><br><span class="line">    <span class="keyword">if</span> (ofmt_ctx &amp;&amp; !(out_fmt-&gt;flags &amp; AVFMT_NOFILE))</span><br><span class="line">        avio_close(ofmt_ctx-&gt;pb);</span><br><span class="line">    av_packet_free(&amp;pkt);</span><br><span class="line">    avformat_close_input(&amp;ifmt_ctx);</span><br><span class="line">    avformat_free_context(ifmt_ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习了一部分ffmpeg的知识，但是没有目标的学习似乎好像学不到什么东西。&lt;/p&gt;</summary>
    
    
    
    
    <category term="FFMPEG" scheme="http://example.com/tags/FFMPEG/"/>
    
  </entry>
  
  <entry>
    <title>从MV中提取音频</title>
    <link href="http://example.com/jsblog/8ef2442b.html"/>
    <id>http://example.com/jsblog/8ef2442b.html</id>
    <published>2020-12-20T04:13:33.000Z</published>
    <updated>2020-12-20T04:20:59.405Z</updated>
    
    <content type="html"><![CDATA[<p>看过了FFMPEG中的一些结构体，可能对于怎么使用这些结构体写代码有些遗忘，尤其是如何处理音视频。<a id="more"></a>接下来从头开始实现一个从MV中可以提取音频数据的小例子，但是由于ffmpeg不支持MP3onMP4的encoder，所以在输出文件的时候可以设置为AAC格式，如果设置为MP3输出格式，则不会导出音频数据。</p><p>首先看一下流程图：</p><p><img src="https://pic2.zhimg.com/80/v2-224946e45543a0297fcbc9fc49b6a80d_720w.jpg" alt="img"></p><p>以上流程主要分为：</p><ol><li>打开文件提取参数</li><li>准备输出文件，设置输出流</li><li>参数复制，复制解码器参数信息以及初始AVIOContext</li><li>复制数据</li><li>最后释放资源</li></ol><p>然后看一下代码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/avutil.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage : extrace &lt;input&gt; &lt;output&gt;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* input = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* output = argv[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//注册编解码器</span></span><br><span class="line">    av_register_all();</span><br><span class="line">    <span class="comment">//申请avformatcontext</span></span><br><span class="line">    AVFormatContext *ifmt_ctx = avformat_alloc_context();</span><br><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;ifmt_ctx,input,<span class="literal">NULL</span>,<span class="literal">NULL</span>) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fail to open input stream\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取一些流的信息</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(ifmt_ctx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fail to find the stream info\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将打开文件的信息以及ffmpeg的信息显示到控制台上</span></span><br><span class="line">    av_dump_format(ifmt_ctx,<span class="number">0</span>,input,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//找到最好的音频流的索引</span></span><br><span class="line">    <span class="keyword">int</span> audio_stream_index = <span class="number">-1</span>;</span><br><span class="line">    audio_stream_index = av_find_best_stream(ifmt_ctx,AVMEDIA_TYPE_AUDIO,<span class="number">-1</span>,<span class="number">-1</span>,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (audio_stream_index == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fail to find the audio stream\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//音频流和此音频的解码器</span></span><br><span class="line">    AVStream *in_stream = ifmt_ctx-&gt;streams[audio_stream_index];</span><br><span class="line">    AVCodec* pCodec = avcodec_find_decoder(in_stream-&gt;codecpar-&gt;codec_id);</span><br><span class="line">    <span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fail to find the codec\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从输出文件中读取输出格式</span></span><br><span class="line">    AVOutputFormat *out_fmt = av_guess_format(<span class="literal">NULL</span>,output,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (out_fmt==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;didn`t support this format&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建输出环境，并设置与输出文件关联和设置输出文件的格式</span></span><br><span class="line">    AVFormatContext *ofmt_ctx = avformat_alloc_context();</span><br><span class="line">    <span class="keyword">if</span> (avformat_alloc_output_context2(&amp;ofmt_ctx,out_fmt,out_fmt-&gt;name,output) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fail to alloc output context\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据编解码器和输出ofmt_ctx创建输出流</span></span><br><span class="line">    AVStream *out_stream = avformat_new_stream(ofmt_ctx,pCodec);</span><br><span class="line">    <span class="comment">//设置输出流的编解码器参数</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_parameters_copy(out_stream-&gt;codecpar,in_stream-&gt;codecpar) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fail to copy parameteres\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建并初始化AVIOContext并置AVIOContext的标志为写入文件，同时与输出文件关联起来</span></span><br><span class="line">    <span class="keyword">if</span> (avio_open(&amp;ofmt_ctx-&gt;pb,output,AVIO_FLAG_WRITE) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fail to open aviocontext\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写入文件头信息</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_write_header(ofmt_ctx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fail to write header\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化AVpacket</span></span><br><span class="line">    AVPacket *pkt = av_packet_alloc();</span><br><span class="line">    av_init_packet(pkt);</span><br><span class="line">    <span class="comment">//读取ifmt_ctx中的包</span></span><br><span class="line">    <span class="keyword">while</span>(av_read_frame(ifmt_ctx,pkt) &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pkt-&gt;stream_index == audio_stream_index)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//重新计算时间戳，变换为音频输出的时间戳</span></span><br><span class="line">            pkt-&gt;pts = av_rescale_q_rnd(pkt-&gt;pts,in_stream-&gt;time_base,out_stream-&gt;time_base,(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX));</span><br><span class="line">            pkt-&gt;dts = pkt-&gt;pts;</span><br><span class="line">            pkt-&gt;duration = av_rescale_q(pkt-&gt;duration,in_stream-&gt;time_base,out_stream-&gt;time_base);</span><br><span class="line">            pkt-&gt;pos = <span class="number">-1</span>;</span><br><span class="line">            pkt-&gt;stream_index = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//对pkt检查并写入文件包</span></span><br><span class="line">            av_interleaved_write_frame(ofmt_ctx,pkt);</span><br><span class="line">            <span class="comment">//将pkt中的资源释放</span></span><br><span class="line">            av_packet_unref(pkt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写入尾部信息</span></span><br><span class="line">    av_write_trailer(ofmt_ctx);</span><br><span class="line">    <span class="comment">//释放资源，释放pkt</span></span><br><span class="line">    av_free_packet(pkt);</span><br><span class="line">    <span class="comment">//关闭aviocontext 写入完成</span></span><br><span class="line">    avio_close(ofmt_ctx-&gt;pb);</span><br><span class="line">    <span class="comment">//释放ofmt_ctx</span></span><br><span class="line">    avformat_free_context(ofmt_ctx);</span><br><span class="line">    <span class="comment">//关闭并释放输入ifmt_ctx</span></span><br><span class="line">    avformat_close_input(&amp;ifmt_ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract.exe test.mp4 out.aac</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;看过了FFMPEG中的一些结构体，可能对于怎么使用这些结构体写代码有些遗忘，尤其是如何处理音视频。&lt;/p&gt;</summary>
    
    
    
    
    <category term="FFMPEG" scheme="http://example.com/tags/FFMPEG/"/>
    
  </entry>
  
  <entry>
    <title>ffprobe的用法</title>
    <link href="http://example.com/jsblog/6a6c7041.html"/>
    <id>http://example.com/jsblog/6a6c7041.html</id>
    <published>2020-12-20T04:12:39.000Z</published>
    <updated>2020-12-20T04:20:59.405Z</updated>
    
    <content type="html"><![CDATA[<p>ffprobe是ffmpeg中一个查看多媒体文件信息的模块。<a id="more"></a>此模块可以用来查看多媒体文件格式以及编码。ffprobe的命令较多，这里只简单的列举了一些比较常用的命令。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">-L 显示协议</span><br><span class="line">-h/-?/-help/--help topic 帮助可以选择话题</span><br><span class="line">-version 显示版本</span><br><span class="line">-buildconf 展示编译配置选项</span><br><span class="line">-formats 显示支持的编码</span><br><span class="line">-muxers 展示支持的封装器</span><br><span class="line">-demuxers 展示支持的解封装器</span><br><span class="line">-devices 展示支持的设备</span><br><span class="line">-codecs 展示支持的编码</span><br><span class="line">-decoders 显示支持的解码器</span><br><span class="line">-encoders 显示支持的编码器</span><br><span class="line">-bsfs 显示支持的比特流过滤器</span><br><span class="line">-protocols 展示支持的协议</span><br><span class="line">-filters 展示支持的过滤器</span><br><span class="line">-pix_fmts 显示支持的像素格式</span><br><span class="line">-layouts 展示支持的声道格式</span><br><span class="line">-sample_fmts 显示支持的采样格式</span><br><span class="line">-colors 展示支持的颜色名称</span><br><span class="line">-loglevel loglevel 设置日志级别</span><br><span class="line">-v loglevel 设置日志级别</span><br><span class="line">-report 生成报告</span><br><span class="line">-max_alloc bytes 设置单个已分配块的最大大小</span><br><span class="line">-cpuflags flags 指定cpu标志</span><br><span class="line">-hide_banner hide_banner 不显示程序横幅</span><br><span class="line">-sources device 列出源的输出设备</span><br><span class="line">-sinks device 列出输出设备的接收器</span><br><span class="line">-f format 指定格式</span><br><span class="line">-unit 显示显示值的单位</span><br><span class="line">-prefix 对显示的值使用SI前缀</span><br><span class="line">-byte_binary_prefix 对字节单位使用二进制前缀</span><br><span class="line">-sexagesimal 对时间单位使用六十进制格式 HOURS:MM:SS.MICROSECONDS </span><br><span class="line">-pretty 美化显示输出的值，让人可读</span><br><span class="line">-print_format format 设置打印格式 (available formats are: default, compact, csv, flat, ini, json, xml)</span><br><span class="line">-of format -print_format的编码</span><br><span class="line">-select_streams stream_specifier 选择指定的stream</span><br><span class="line">-sections 打印节结构和节信息，然后退出</span><br><span class="line">-show_data 显示数据包信息</span><br><span class="line">-show_data_hash 显示数据包hash值</span><br><span class="line">-show_error 显示探测中的错误</span><br><span class="line">-show_format 显示格式/容器信息</span><br><span class="line">-show_frames 显示帧信息</span><br><span class="line">-show_format_entry entry 显示格式/容器信息中的特定条目</span><br><span class="line">-show_entries entry_list 显示一组指定的项</span><br><span class="line">-show_log 显示log</span><br><span class="line">-show_packets 显示packet信息</span><br><span class="line">-show_programs  显示程序信息</span><br><span class="line">-show_streams 显示stream的信息</span><br><span class="line">-show_chapters 显示chapters的信息</span><br><span class="line">-count_frames 每个stream中的帧数</span><br><span class="line">-count_packets 每个stream中的包数量</span><br><span class="line">-show_program_version ffprobe的版本</span><br><span class="line">-show_library_versions 库的版本</span><br><span class="line">-show_versions 程序和库的版本号</span><br><span class="line">-show_pixel_formats 展示像素格式描述</span><br><span class="line">-show_private_data 显示私有数据</span><br><span class="line">-private 和显示私有数据一样</span><br><span class="line">-bitexact 强制提取bit输出</span><br><span class="line">-read_intervals read_intervals 设置读取间隔</span><br><span class="line">-default 默认所有选项</span><br><span class="line">-i input_file 读取指定文件</span><br><span class="line">-print_filename print_file 重新显示输入的文件名</span><br><span class="line">-find_stream_info 读取并解码流，用启发式方法填充缺失的信息</span><br></pre></td></tr></table></figure><p>举个例子说明一下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffprobe -show_format test.mp4 -print_format json</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;format&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;filename&quot;</span>: <span class="string">&quot;test.mp4&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;nb_streams&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;nb_programs&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;format_name&quot;</span>: <span class="string">&quot;mov,mp4,m4a,3gp,3g2,mj2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;format_long_name&quot;</span>: <span class="string">&quot;QuickTime / MOV&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;start_time&quot;</span>: <span class="string">&quot;0.000000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;duration&quot;</span>: <span class="string">&quot;319.204000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="string">&quot;20393093&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;bit_rate&quot;</span>: <span class="string">&quot;511098&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;probe_score&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">&quot;tags&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;major_brand&quot;</span>: <span class="string">&quot;isom&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;minor_version&quot;</span>: <span class="string">&quot;512&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;compatible_brands&quot;</span>: <span class="string">&quot;isomiso2avc1mp41&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;artist&quot;</span>: <span class="string">&quot;张国荣&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;163 key(Don&#x27;t modify):LxuL/bhXK+eaR4o7F6vxHKbEgEKNGLg65XxJgCCH5+sQLLnuMmlonrU27WIYQt6PVE6HRptXEzkJGEUUyqRRgCQJCfXHsb5uK0bdi2lw2dOZM6en1xhkYzGV5bS0uqXI0ZMFdk2CrlfK9x7cKCXIO7AU63YasnAy7YR4dW6boVAOaUvjIWxu5CuHaCLpAF8idLjG4VlAtUpZDj2WEXQJRcZZUFLtJWNVzfbnajHn6j7qG9e0XlNSmOu6RlE/X4MR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;追 &quot;</span>,</span><br><span class="line">            <span class="attr">&quot;encoder&quot;</span>: <span class="string">&quot;Lavf56.4.101&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ffprobe是ffmpeg中一个查看多媒体文件信息的模块。&lt;/p&gt;</summary>
    
    
    
    
    <category term="FFMPEG" scheme="http://example.com/tags/FFMPEG/"/>
    
  </entry>
  
</feed>
