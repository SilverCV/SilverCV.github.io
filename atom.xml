<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林木博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-20T03:09:07.603Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>JSL</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式总结</title>
    <link href="http://example.com/jsblog/b580ef29.html"/>
    <id>http://example.com/jsblog/b580ef29.html</id>
    <published>2020-12-20T03:08:11.000Z</published>
    <updated>2020-12-20T03:09:07.603Z</updated>
    
    <content type="html"><![CDATA[<p>学习完了设计模式，好像也忘记了设计模式但我记得一句话针对接口编程而不是针对实现编程。<a id="more"></a></p><p>我始终认为学习编程只有实践才能收获更多，单纯的看理论写例子会遗忘的很快，当然学习完设计模式之后并不是没有收获，起码能够扩宽自己的知识面，唯有在实践中不断的运用自己所学的知识才能提高的快。现在总结一下学习的设计模式：</p><p>首先23种设计模式可以按照目的划分为创建型、结构型和行为型。创建型与对象的创建有关；结构型处理类和对象的组合；行为型模式对类或对象怎样交互和怎样分配职责进行描述。如下表：</p><table><thead><tr><th>目的</th><th>设计模式</th><th>意图</th></tr></thead><tbody><tr><td>创建型</td><td>AbstractFactory模式</td><td>提供一个接口以创建一系列相关或相互依赖的对象，而无需指定它们具体的类。</td></tr><tr><td></td><td>Factory Method模式</td><td>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类</td></tr><tr><td></td><td>Builder模式</td><td>将一个复杂对象的创建与它的表示分离开，使得同样的构建过程可以创建不同的表示</td></tr><tr><td></td><td>Prototype模式</td><td>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</td></tr><tr><td></td><td>Singleton模式</td><td>保证一个类仅有一个实例，并提供一个访问它的全局访问点</td></tr><tr><td>结构型</td><td>Adapter模式</td><td>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的哪些类可以一起工作。</td></tr><tr><td></td><td>Bridge模式</td><td>将抽象部分与它的实现部分分离，使他们能够独立的变化</td></tr><tr><td></td><td>Composite模式</td><td>将对象组合成树形结构表示“部分-整体”的层次结构。Composite使得用户对单个对象和组合对象的使用具有一致性</td></tr><tr><td></td><td>Decorator模式</td><td>动态地给一个对象添加一些额外的职责。就增加功能来说。Decorator模式相比生成子类更为灵活。</td></tr><tr><td></td><td>Facade模式</td><td>为子系统中一组接口提供一个一致的界面，Façade模式定义了一个高层接口，这个接口使得子系统更加容易调用。</td></tr><tr><td></td><td>Flyweight模式</td><td>运用共享技术有效地支持大量细粒度的对象</td></tr><tr><td></td><td>Proxy模式</td><td>为其他对象提供一种代理以控制对这个对象的访问。</td></tr><tr><td>行为型</td><td>Chain Of Responsibility 模式</td><td>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</td></tr><tr><td></td><td>Command模式</td><td>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销操作。</td></tr><tr><td></td><td>Interpreter模式</td><td>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子</td></tr><tr><td></td><td>Iterator模式</td><td>提供一种方法顺序访问一个组合对象中的各个元素，而又不需要暴露该对象的内部表示</td></tr><tr><td></td><td>Mediator模式</td><td>用一个中介对象来封装一系列对象交互。中介者使各对象不需要显示的引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</td></tr><tr><td></td><td>Observer模式</td><td>定义对象间一种一对多的依赖关系，当一个对象的状态发生改变时所有依赖于它的对象都得到通知并被自动更新。</td></tr><tr><td></td><td>State模式</td><td>允许一个对象在其内部状态时改变它的行为，对象看起来似乎修改了它的类</td></tr><tr><td></td><td>TemplateMethod模式</td><td>定义一个算法的股价，而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法的结构即可重新定义该算法的某些步骤。</td></tr><tr><td></td><td>Visitor模式</td><td>表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素类的前提下定义作用于这些元素的操作。</td></tr><tr><td></td><td>Memento模式</td><td>在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</td></tr><tr><td></td><td>Strategy模式</td><td>策略模式就是定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。这个模式可以使得算法独立于使用它的客户变化而变化。</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习完了设计模式，好像也忘记了设计模式但我记得一句话针对接口编程而不是针对实现编程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>解释器模式</title>
    <link href="http://example.com/jsblog/30cf0cd2.html"/>
    <id>http://example.com/jsblog/30cf0cd2.html</id>
    <published>2020-12-20T03:07:22.000Z</published>
    <updated>2020-12-20T03:09:07.602Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。<a id="more"></a></p><p><strong>动机</strong>:在软件构建过程中，如果某一特定领域的问题比较复杂类似的机构不断重复出现，如果使用普通的编程方式来实现将面临非常频繁的变化。</p><p><strong>适用性</strong>:</p><p>当有一个语言需要解释执行，并且你可将该语言中的句子表示为一个抽象语法树时，可是用interpreter模式，当文法简单的时候以及效率不是关键问题的时候使用该模式效果最好。</p><p><strong>结构：</strong></p><p><img src="https://pic3.zhimg.com/80/v2-70da0c8466bdb6f7454752213f5e153e_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>AbstractExpression: 声明一个抽象的解释操作，这个接口为抽象语法树种所有的结点共享。</p><p>TerminalExpression : 实现与文法中的终结符相关联的解释操作；一个句子中的每个终结符需要该类的一个实例</p><p>NonterminalExpression : 对文法中的每一条规则R都需要一个NonterminalExpression类；为R的每个符号维护一个AbstractExpression类型的实例变量；为文法中的非终结符实现解释操作。</p><p>Context: 包含解释器之外的一些全局变量</p><p>Client: 构建表示文法定义的语言中一个特定的句子的抽象语法树；调用解释操作</p><p><strong>协作</strong>：</p><p>Client构建一个句子，他是NonterminalExpression 和TerminalExpression的实例的一个抽象语法树。每一个非终结符表达式结点定义相应子表达式的解释操作。每一结点的解释操作Context来储存和访问解释器的状态。</p><p><strong>效果</strong>：</p><p>\1. 易于改变和扩展文法</p><p>\2. 易于实现文法</p><p>\3. 复杂的文法难以维护</p><p>\4. 增加新的解释器表达式的方式。</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> Context = <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbsrtactExpression</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~AbsrtactExpression()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Interpret</span><span class="params">(Context&amp; c)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  AbsrtactExpression()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TermnialExpression</span> :</span> <span class="keyword">public</span> AbsrtactExpression&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  TermnialExpression()&#123;&#125;</span><br><span class="line">  ~TermnialExpression()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Interpret</span><span class="params">(Context&amp; c)</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Terminaled&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonterminalExpress</span> :</span> <span class="keyword">public</span> AbsrtactExpression&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  NonterminalExpress()&#123;&#125;</span><br><span class="line">  NonterminalExpress(AbsrtactExpression* e): _exp(e)&#123;&#125;</span><br><span class="line">  ~NonterminalExpress()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Interpret</span><span class="params">(Context&amp; c)</span></span>&#123;</span><br><span class="line">    _exp-&gt;Interpret(c);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  AbsrtactExpression *_exp;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HExpression</span> :</span> <span class="keyword">public</span> AbsrtactExpression&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Interpret</span><span class="params">(Context&amp; c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = c.find_first_of(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; c[pos] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Context s = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">  HExpression hexp;</span><br><span class="line">  <span class="function">NonterminalExpress <span class="title">nonterminalExpress</span><span class="params">(&amp;hexp)</span></span>;</span><br><span class="line">  nonterminalExpress.Interpret(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>访问者模式</title>
    <link href="http://example.com/jsblog/64b51ed9.html"/>
    <id>http://example.com/jsblog/64b51ed9.html</id>
    <published>2020-12-20T03:06:27.000Z</published>
    <updated>2020-12-20T03:09:07.604Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素类的前提下定义作用于这些元素的操作。<a id="more"></a></p><p><strong>动机</strong>:在软件构建过程中，由于需求的改变，某些类层次结构中常常需要增加新的行为（方法），如果直接在基类中做这样的更改，将会给子类代理很繁重的变更负担，甚至破坏原有设计。</p><p><strong>适用性</strong>:</p><p>\1. 一个对象结构含有很多类对象，它们有不同的接口，而你想对这些对象实施一些依赖于具体类的操作</p><p>\2. 需要对一个对象结构中的对象进行很多不同而且不相关的操作，而你想避免让这些操作“污染“这些类对象。</p><p>\3. 定义对象结构的类很少改变，但经常需要在此结构上定义新的操作。</p><p><strong>结构：</strong></p><p><img src="https://pic3.zhimg.com/80/v2-26e3a744d80999525fa167a56b9b5612_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Visitor: 为该对象结构中ConcreteElement的每一个类声明一个Visit操作</p><p>ConcreteVisitor: 实现每个由Visitor声明的操作</p><p>Element : 定义一个Accept操作，它以一个访问者为参数</p><p>ConcreteElement:实现一个Accept操作，该操作以一个访问者为参数</p><p>ObjectStructure: 能枚举它的元素，可以提供一个高层接口以允许访问者访问它的元素；可以是一个组合或者是一个集合。</p><p><strong>协作</strong>：</p><p>一个使用Visitor模式的客户必须创建一个ConcreteVisitor对象，然后遍历该对象结构，并用该访问者访问每一个元素</p><p>当一个元素被访问时，它调用对应于它的类的Visitor操作。</p><p><strong>效果</strong>：</p><p>\1. 访问者模式使得易于增加新的操作</p><p>\2. 访问者集中相关的操作而分离无关的操作</p><p>\3. 增加新的ConcreteElement类很困难</p><p>\4. 通过该类层次进行访问</p><p>\5. 累积状态</p><p>\6. 破坏封装</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Visitor()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitElementA</span><span class="params">(Element *e)</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitElementB</span><span class="params">(Element *e)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Element()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor&amp; visitor)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> :</span> <span class="keyword">public</span> Element&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor&amp; visitor)</span></span>&#123;</span><br><span class="line">    visitor.visitElementA(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span>:</span> <span class="keyword">public</span> Element&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Accept</span><span class="params">(Visitor&amp; visitor)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    visitor.visitElementB(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitorA</span> :</span> <span class="keyword">public</span> Visitor&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">visitElementA</span><span class="params">(Element *e)</span>  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;visitor A process element A&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">visitElementB</span><span class="params">(Element *e)</span>  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;visitor A process element B&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VisitorB</span> :</span> <span class="keyword">public</span> Visitor&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">visitElementA</span><span class="params">(Element *e)</span>  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;visitor B process element A&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">visitElementB</span><span class="params">(Element *e)</span>  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;visitor B process element B&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  ConcreteElementA a;</span><br><span class="line">  VisitorA va;</span><br><span class="line">  a.Accept(va);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素类的前提下定义作用于这些元素的操作。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>命令模式</title>
    <link href="http://example.com/jsblog/78134e07.html"/>
    <id>http://example.com/jsblog/78134e07.html</id>
    <published>2020-12-20T03:05:26.000Z</published>
    <updated>2020-12-20T03:09:07.587Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>: 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销操作。<a id="more"></a></p><p><strong>动机</strong>:</p><p>在软件构建过程中，“行为请求者”与“行为实现者”通常呈现出一种“紧耦合”。但在某些场合——比如需要对行为进行“记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。</p><p><strong>适用性</strong>:</p><p>\1. 抽象出待执行的动作以参数化某对象；</p><p>\2. 在不同的时刻指定、排列和执行请求；</p><p>\3. 支持取消操作</p><p>\4. 支持修改日志，这样当系统崩溃时，这些修改可以重做一遍</p><p>\5. 用构建在原语操作上的高层操作构造一个系统。</p><p><strong>结构：</strong></p><p><img src="https://pic1.zhimg.com/80/v2-ee255c6ce8ccf504123ebe6658d23560_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Command: 声明执行操作的接口</p><p>ConcreteCommand :讲一个接收者对象绑定于一个动作；调用接收者相应的操作，以实现Execute</p><p>Client: 创建一个具体命令对象并设定它的接收者</p><p>Invoker: 要求该命令执行这个请求</p><p>Receiver: 知道如何实施与执行一个请求相关的操作，任何类都肯作为一个接收者。</p><p><strong>协作</strong>：</p><p>Client创建一个ConcreteCommand对象并指定它的Receiver对象</p><p>Invoker对象存储该ConcreteCommand对象。</p><p>该Invoker通过调用Command对象的Execute操作来提交一个请求</p><p>ConcreteCommand对象调用它的Receiver的一些操作以执行该请求</p><p><strong>效果</strong>：</p><p>\1. Command模式将调用操作的对象与指导如何实现该操作的对象解耦。</p><p>\2. Command是头等的对象</p><p>\3. 可将多个命令装配成一个组合命令</p><p>\4. 增加新的Command很容易，因为这无须改变已有的类</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Command()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Command()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> :</span> <span class="keyword">public</span> Command&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ConcreteCommand()&#123;&#125;</span><br><span class="line">  ConcreteCommand(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name):_name(name)&#123;&#125;</span><br><span class="line">  ~ConcreteCommand()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; _name &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> _name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Invoker()&#123;&#125;</span><br><span class="line">  ~Invoker()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addCommand</span><span class="params">(Command *c)</span></span>&#123;</span><br><span class="line">    _commnads.emplace_back(c);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : _commnads) &#123;</span><br><span class="line">      c-&gt;Execute();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Command*&gt; _commnads;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Receiver()&#123;&#125;</span><br><span class="line">  Receiver(Invoker <span class="keyword">const</span>&amp; ivk):_invoker(ivk)&#123;&#125;</span><br><span class="line">  ~Receiver()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Action</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _invoker.Run();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Invoker _invoker;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">ConcreteCommand <span class="title">open</span><span class="params">(<span class="string">&quot;open&quot;</span>)</span></span>;</span><br><span class="line">  <span class="function">ConcreteCommand <span class="title">close</span><span class="params">(<span class="string">&quot;close&quot;</span>)</span></span>;</span><br><span class="line">  Invoker invoker;</span><br><span class="line">  invoker.addCommand(&amp;open);</span><br><span class="line">  invoker.addCommand(&amp;close);</span><br><span class="line">  <span class="function">Receiver <span class="title">receiver</span><span class="params">(invoker)</span></span>;</span><br><span class="line">  receiver.Action();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;: 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销操作。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>职责链模式</title>
    <link href="http://example.com/jsblog/7bf8ae3c.html"/>
    <id>http://example.com/jsblog/7bf8ae3c.html</id>
    <published>2020-12-20T03:04:45.000Z</published>
    <updated>2020-12-20T03:09:07.600Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。<a id="more"></a></p><p><strong>动机</strong>: 在软件构建过程中，一个请求可能被多个对象处理，但是每个请求在运行时只能有一个接受者，如果显式指定，将必不可少地带来请求发送者与接受者的紧耦合。</p><p><strong>适用性</strong>:</p><p>\1. 有多个对象可以处理一个请求，哪个对象处理该请求运行时自动确定。</p><p>\2. 在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。</p><p>\3. 可处理一个请求的对象集合应被动态指定</p><p><strong>结构：</strong></p><p><img src="https://pic3.zhimg.com/80/v2-be37b4bb3fa155cd36e988e3443595ee_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Handler : 定义一个处理请求的接口；实现后继链</p><p>ConcreteHandler:处理它所负责的请求；可访问它的后继者；如果可处理该请求，就处理之；否则将该请求转发给它的后继者</p><p>ClientL向链上的具体矗立着对象提交请求。</p><p><strong>协作</strong>：</p><p>当客户提交一个请求时，请求沿链传递直至有一个ConcreteHandler对象负责处理它。</p><p><strong>效果</strong>：</p><p>\1. 降低耦合度，该模式使得一个对象无须知道是哪一个对象处理其请求。</p><p>\2. 增强了给对象指派职责的灵活性</p><p>\3. 不保证被接受，因为一个请求没有明确的接收者，那么就不能保证它一定会被处理</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">REQUEST</span>&#123;</span></span><br><span class="line">  SEND,</span><br><span class="line">  RECEIVE,</span><br><span class="line">  CLOSE,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Handler()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">(REQUEST)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Handler():_successor(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">  Handler(Handler *successor):_successor(successor)&#123;&#125;</span><br><span class="line">  Handler *_successor;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendHandler</span> :</span> <span class="keyword">public</span> Handler&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  SendHandler()&#123;&#125;</span><br><span class="line">  SendHandler(Handler *_handler):Handler(_handler)&#123;&#125;</span><br><span class="line">  ~SendHandler()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">(REQUEST request)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (request == REQUEST::SEND)&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; process send &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (_successor != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">      _successor-&gt;HandleRequest(request);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no handler&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloseHandler</span> :</span> <span class="keyword">public</span> Handler&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  CloseHandler()&#123;&#125;</span><br><span class="line">  CloseHandler(Handler *_handler):Handler(_handler)&#123;&#125;</span><br><span class="line">  ~CloseHandler()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">(REQUEST request)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (request == REQUEST::CLOSE)&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; process close &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (_successor != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">      _successor-&gt;HandleRequest(request);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no handler&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReceiveHandler</span> :</span> <span class="keyword">public</span> Handler&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ReceiveHandler()&#123;&#125;</span><br><span class="line">  ReceiveHandler(Handler *_handler):Handler(_handler)&#123;&#125;</span><br><span class="line">  ~ReceiveHandler()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">(REQUEST request)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (request == REQUEST::RECEIVE)&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; process receive  &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (_successor != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">      _successor-&gt;HandleRequest(request);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no handler&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  Handler *h1 = <span class="keyword">new</span> SendHandler(<span class="literal">NULL</span>);</span><br><span class="line">  Handler *h2 = <span class="keyword">new</span> ReceiveHandler(h1);</span><br><span class="line">  Handler *h3 = <span class="keyword">new</span> CloseHandler(h2);</span><br><span class="line">  h3-&gt;HandleRequest(REQUEST::CLOSE);</span><br><span class="line">  h2-&gt;HandleRequest(REQUEST::SEND);</span><br><span class="line">  h3-&gt;HandleRequest(REQUEST::RECEIVE);</span><br><span class="line">  <span class="keyword">delete</span> h3;</span><br><span class="line">  <span class="keyword">delete</span> h2;</span><br><span class="line">  <span class="keyword">delete</span> h1;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>迭代器模式</title>
    <link href="http://example.com/jsblog/9055d217.html"/>
    <id>http://example.com/jsblog/9055d217.html</id>
    <published>2020-12-20T03:03:52.000Z</published>
    <updated>2020-12-20T03:09:07.605Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:提供一种方法顺序访问一个组合对象中的各个元素，而又不需要暴露该对象的内部表示。<a id="more"></a></p><p><strong>动机</strong>:在软件构建过程中，集合对象内部结构常常变化各异，但对于这些集合对象，我们希望在不暴露其内部结构的同时，可以让外部客户代码透明地访问其中包含的元素；同时这个“透明遍历”也为“同一种算法在多种集合对象上进行操作”提供了可能。</p><p><strong>适用性</strong>:</p><p>\1. 访问一个集合对象的内容而无需暴露它的内部表示</p><p>\2. 支持聚合对象的多种遍历</p><p>\3. 为遍历不同的聚合结构提供一个统一的接口</p><p><strong>结构：</strong></p><p><img src="https://pic3.zhimg.com/80/v2-77d48f12ddeb554eedd56facc7a7c762_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Iterator: 迭代器定义访问和遍历元素的接口</p><p>ConcreteIterator : 具体迭代器实现迭代器接口；对该聚合遍历时跟踪当前位置</p><p>Aggregate: 聚合定义创建相应的迭代器</p><p>ConcreteAffregate : 具体聚合实现创建相应迭代器的接口，该操作返回ConcreteIterator的一个适当的实例</p><p><strong>协作</strong>：</p><p>ConcreteIterator跟踪聚合中的当前对象，并能够计算出待遍历的后继对象。</p><p><strong>效果</strong>：</p><p>\1. 支持以不同的方式遍历一个聚合</p><p>\2. 简化了聚合的接口</p><p>\3. 在同一个聚合上可以有多个遍历</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//抽象迭代器声明</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">Iterator</span>;</span></span><br><span class="line"><span class="comment">//抽象聚合</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>  T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aggregate</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Aggregate()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> Iterator&lt;T&gt;* <span class="title">GetIterator</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">virtual</span> <span class="keyword">const</span> T&amp;<span class="keyword">operator</span>[](<span class="keyword">size_t</span> index) <span class="keyword">const</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">AddItem</span><span class="params">(T <span class="keyword">const</span>&amp; t)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Aggregate()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//抽象迭代器定义接口</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>  T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Iterator()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Next</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">IsDone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">virtual</span> <span class="keyword">const</span> T&amp; <span class="keyword">operator</span>*()  <span class="keyword">const</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">friend</span> <span class="built_in">std</span>::ostream&amp;<span class="keyword">operator</span>&lt;&lt;(<span class="built_in">std</span>::ostream&amp; os,Iterator&amp; t)&#123;</span><br><span class="line">    os &lt;&lt; *t;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Iterator()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//具体的迭代器</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> :</span> <span class="keyword">public</span> Iterator&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ConcreteIterator(Aggregate&lt;T&gt;* agg) : _aggregate(agg),current_(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">  ~ConcreteIterator()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>&#123;</span><br><span class="line">    current_ = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">IsDone</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> current_ &gt;= _aggregate-&gt;size();&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Next</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (current_ &lt; _aggregate-&gt;size())&#123;</span><br><span class="line">      current_ ++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> T&amp; <span class="keyword">operator</span>*()  <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(current_ &lt;= _aggregate-&gt;size())&#123;</span><br><span class="line">      <span class="keyword">return</span> (*_aggregate)[current_];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">throw</span>  <span class="built_in">std</span>::logic_error(<span class="string">&quot;index overflow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Aggregate&lt;T&gt;* _aggregate;</span><br><span class="line">  <span class="keyword">size_t</span> current_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//具体聚合</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>  T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">ConcreteAggregate</span> :</span> <span class="keyword">public</span> Aggregate&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ConcreteAggregate()&#123;&#125;</span><br><span class="line">  ~ConcreteAggregate()&#123;&#125;</span><br><span class="line">  <span class="function">Iterator&lt;T&gt;* <span class="title">GetIterator</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator&lt;T&gt;(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _items.size();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">AddItem</span><span class="params">(T <span class="keyword">const</span>&amp; t)</span></span>&#123;</span><br><span class="line">    _items.emplace_back(t);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> T&amp; <span class="keyword">operator</span>[](<span class="keyword">size_t</span> index) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; _items.size())&#123;</span><br><span class="line">      <span class="keyword">return</span> _items[index];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="built_in">std</span>::logic_error(<span class="string">&quot;error for index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt; _items;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  ConcreteAggregate&lt;<span class="keyword">int</span>&gt; aggtest;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; ++i) &#123;</span><br><span class="line">    aggtest.AddItem(i);</span><br><span class="line">  &#125;</span><br><span class="line">  Iterator&lt;<span class="keyword">int</span>&gt; *it = aggtest.GetIterator();</span><br><span class="line">  <span class="keyword">for</span> (it-&gt;first();!it-&gt;IsDone();it-&gt;Next()) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:提供一种方法顺序访问一个组合对象中的各个元素，而又不需要暴露该对象的内部表示。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>组合模式</title>
    <link href="http://example.com/jsblog/df879792.html"/>
    <id>http://example.com/jsblog/df879792.html</id>
    <published>2020-12-20T03:02:57.000Z</published>
    <updated>2020-12-20T03:09:07.597Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:将对象组合成树形结构表示“部分-整体”的层次结构。Composite使得用户对单个对象和组合对象的使用具有一致性。 <a id="more"></a></p><p><strong>动机</strong>: 软件在某些情况下，客户代码过多的依赖于对象容器复杂的内部实现结构，对象容器内部结构（而非抽象接口）的变换将引起客户代码的频繁变化，带来了代码的维护性，扩展性等弊端。</p><p><strong>适用性</strong>:</p><p>\1. 你想表示对象的部分-整体层次结构</p><p>\2. 你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中所有的对象。</p><p><strong>结构：</strong></p><p><img src="https://pic1.zhimg.com/80/v2-b5a593387f1815173cf323659810f978_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Component：为组合中的对象声明接口；在适当的情况下，实现所有类共有接口的缺省行为；声明一个接口用户访问和管理Component的子组件；在递归结构中定义一个接口，用于访问一个父部件，并在合适的情况下实现它。</p><p>Leaf: 在组合中表示叶结点对象，叶结点没有子结点；在组合中定义对象的行为。</p><p>Composite: 定义有子部件的那些部件的行为；存储子部件；在Component接口中实现与子部件有关的操作。</p><p>Client：通过component接口操纵组合部件对象</p><p><strong>协作</strong>：</p><p>用户使用Component类接口与组合结构中的对象进行交互，如果接受者是叶结点，则直接处理请求；如果接受者是Composite，它通常将请求转发给它的子部件。</p><p><strong>效果</strong>：</p><p>\1. 定义了包含基本对象和组合对象的类层次结构</p><p>\2. 简化客户代码</p><p>\3. 使得更容易增加新类型的组件</p><p>\4. 使设计更加一般化</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Component()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(Component *)</span></span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Remove</span><span class="params">(Component *)</span></span>&#123;&#125;</span><br><span class="line">  <span class="function">Component *<span class="title">getChild</span><span class="params">(<span class="keyword">int</span>)</span></span>&#123; <span class="keyword">return</span> <span class="literal">nullptr</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Component()&#123;&#125;</span><br><span class="line">  Component(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name): _name(name)&#123;&#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> _name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> :</span> <span class="keyword">public</span> Component&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Composite()&#123;&#125;</span><br><span class="line">  Composite(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name):Component(name)&#123;&#125;</span><br><span class="line">  ~Composite()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;name : &quot;</span> &lt;&lt; _name &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c : _component) &#123;</span><br><span class="line">      c-&gt;Process();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(Component *c)</span></span>&#123;</span><br><span class="line">    _component.emplace_back(c);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Remove</span><span class="params">(Component *c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = <span class="built_in">std</span>::find(_component.begin(),_component.end(),c);</span><br><span class="line">    <span class="keyword">if</span> (it != _component.end())&#123;</span><br><span class="line">      Component *temp = *it;</span><br><span class="line">        _component.erase(it);</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">        temp = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">Component *<span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; _component.size())&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _component[index];</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Component *&gt; _component;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> :</span> <span class="keyword">public</span> Component&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Leaf()&#123;&#125;</span><br><span class="line">  Leaf(<span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; name) :Component(name)&#123;&#125;</span><br><span class="line">  ~Leaf()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I am &quot;</span> &lt;&lt; _name &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Composite* root = <span class="keyword">new</span> Composite(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">  Composite* leftTree = <span class="keyword">new</span> Composite(<span class="string">&quot;left tree&quot;</span>);</span><br><span class="line">  Composite* rightTree = <span class="keyword">new</span> Composite(<span class="string">&quot;right tree&quot;</span>);</span><br><span class="line"></span><br><span class="line">  Leaf *leaf1 = <span class="keyword">new</span> Leaf(<span class="string">&quot;left leaf 1&quot;</span>);</span><br><span class="line">  Leaf *leaf2 = <span class="keyword">new</span> Leaf(<span class="string">&quot;right leaf 2&quot;</span>);</span><br><span class="line">  Leaf *leaf3 = <span class="keyword">new</span> Leaf(<span class="string">&quot;left leaf 3&quot;</span>);</span><br><span class="line">  Leaf *leaf4 = <span class="keyword">new</span> Leaf(<span class="string">&quot;right leaf 4&quot;</span>);</span><br><span class="line">  leftTree-&gt;Add(leaf1);</span><br><span class="line">  leftTree-&gt;Add(leaf2);</span><br><span class="line"></span><br><span class="line">  rightTree-&gt;Add(leaf3);</span><br><span class="line">  rightTree-&gt;Add(leaf4);</span><br><span class="line">  root-&gt;Add(leftTree);</span><br><span class="line">  root-&gt;Add(rightTree);</span><br><span class="line"></span><br><span class="line">  root-&gt;Process();</span><br><span class="line"></span><br><span class="line">  leftTree-&gt;Remove(leaf1);</span><br><span class="line">  leftTree-&gt;Remove(leaf2);</span><br><span class="line">  rightTree-&gt;Remove(leaf3);</span><br><span class="line">  rightTree-&gt;Remove(leaf4);</span><br><span class="line">  root-&gt;Remove(rightTree);</span><br><span class="line">  root-&gt;Remove(leftTree);</span><br><span class="line">  <span class="keyword">delete</span> root;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:将对象组合成树形结构表示“部分-整体”的层次结构。Composite使得用户对单个对象和组合对象的使用具有一致性。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>备忘录模式</title>
    <link href="http://example.com/jsblog/c3176455.html"/>
    <id>http://example.com/jsblog/c3176455.html</id>
    <published>2020-12-20T03:02:27.000Z</published>
    <updated>2020-12-20T03:09:07.588Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。<a id="more"></a></p><p><strong>动机</strong>: 在软件构建过程中，某些对象的状态在转换过程中，可能由于某种需要，要求程序能够回溯到对象之前处于某个点时的状态，如果使用一些共有接口来让其他对象得到对象的状态，便会暴露对象的细节实现。</p><p><strong>适用性</strong>:</p><p>\1. 必须保存一个对象在某个时刻的状态，这样以后需要时它才能恢复到先前的状态</p><p>\2. 如果一个接口让其他对象直接得到这些状态，将会暴露对象的实现细节并破坏对象的封装性。</p><p><strong>结构：</strong></p><p><img src="https://pic1.zhimg.com/80/v2-dde04045396c19999a2d35d8182507d8_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Memento:备忘录存储原发器对象的内部状态，原发器根据需要决定备忘录存储袁发强的哪些内部状态；防止原发器以外的对象访问备忘录。备忘录实际上有两个接口，管理者（Caretaker）只能看到备忘录的窄接口即它只能将备忘录传递给其他对象；想法原发器可以看到一个宽接口，允许它访问返回到先前状态所需要的数据。理想情况下式只允许生成本备忘录的那个原发器访问本备忘录的内部状态。</p><p>Originator: 原发器创建一个备忘录，用以记录当前时刻它的内部状态；使用备忘录恢复内部状态</p><p>Caretaker: 负责保存好备忘录，不能对备忘录的内容进行操作修改</p><p><strong>协作</strong>：</p><p>管理者向原发器请求一个备忘录，保留一段时间后，将其送回到原发器</p><p>备忘录是被动的，只有创建备忘录的原发器会对它的状态进行赋值和检索</p><p><strong>效果</strong>：</p><p>\1. 保持封装边界</p><p>\2. 简化了原发器</p><p>\3. 使用备忘录的代价很高</p><p>\4. 定义窄接口和宽接口</p><p>\5. 维护备忘录的潜在代价</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Memento()&#123;&#125;</span><br><span class="line">  Memento(<span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; _state):_State(_state)&#123;&#125;</span><br><span class="line">  ~Memento()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; <span class="title">GetState</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _State;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetState</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; state)</span></span>&#123;</span><br><span class="line">    _State = state;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> _State;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Originator()&#123;&#125;</span><br><span class="line">  ~Originator()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">ChangeState</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; state)</span></span>&#123;</span><br><span class="line">    _state = state;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetMemento</span><span class="params">(Memento <span class="keyword">const</span>&amp; m)</span></span>&#123;</span><br><span class="line">    _state = m.GetState();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">Memento <span class="title">CreateMemento</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Memento(_state);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;current state is :&quot;</span> &lt;&lt; _state &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> _state;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Memento mem;</span><br><span class="line">  Originator originator;</span><br><span class="line">  originator.ChangeState(<span class="string">&quot;state 1&quot;</span>);</span><br><span class="line">  originator.Output();</span><br><span class="line">  mem = originator.CreateMemento();</span><br><span class="line">  originator.ChangeState(<span class="string">&quot;state 2&quot;</span>);</span><br><span class="line">  originator.Output();</span><br><span class="line">  originator.SetMemento(mem);</span><br><span class="line">  originator.Output();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>状态模式</title>
    <link href="http://example.com/jsblog/8acb1976.html"/>
    <id>http://example.com/jsblog/8acb1976.html</id>
    <published>2020-12-20T03:01:44.000Z</published>
    <updated>2020-12-20T03:09:07.594Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:允许一个对象在其内部状态时改变它的行为，对象看起来似乎修改了它的类  <a id="more"></a></p><p><strong>动机</strong>: 在软件构建过程中，某些对象的状态如果改变，其行为也会随之而发生变化，比如文档处于只读状态，其支持的行为和读写状态支持的行为就可能完全不同。</p><p><strong>适用性</strong>:</p><p>\1. 一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为。</p><p>\2. 一个操作中含有庞大的多分支条件语句，且这些分支依赖于该对象的状态。</p><p><strong>结构：</strong></p><p><img src="https://pic4.zhimg.com/80/v2-75fff74badb5f03d9385d9fa547de483_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Context: 定义客户感兴趣的接口；维护一个ConcreteState子类的示例，这个实例定义当前状态</p><p>State: 定义一个接口以封装与Context的一个特定状态行为</p><p>ConcreteState: 每一个子类实现一个与Context的一个状态相关的行为</p><p><strong>协作</strong>：</p><p>Context将与状态相关的请求委托给当前的ConcreteState对象处理</p><p>Context可将自身作为一个参数传递给处理该请求的状态对象。这使得状态对象在必要时访问Context</p><p>Context是客户使用的主要接口。客户可用状态对象来配置一个Context,一旦一个Context配置完毕，它的客户不再需要直接与状态对象打交道</p><p>Context或ConcreteContext子类都可决定哪个状态是另外一个的后继者，以及是在何种状态下进行状态转换。</p><p><strong>效果</strong>：</p><p>\1. 将与特定状态相关的行为局部化，并且将不同的状态分割开来</p><p>\2. 使状态转换显式化</p><p>\3. State对象可被共享</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IState</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Handle</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetState</span><span class="params">(IState *s)</span></span>&#123;</span><br><span class="line">    _state = s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _state-&gt;Handle();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  IState *_state;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyState</span> :</span> <span class="keyword">public</span> IState&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Handle</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; in flying &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunState</span> :</span> <span class="keyword">public</span> IState&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Handle</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; in running &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Context c;</span><br><span class="line">  IState *fly = <span class="keyword">new</span> FlyState;</span><br><span class="line">  IState *Run = <span class="keyword">new</span> RunState;</span><br><span class="line">  c.SetState(fly);</span><br><span class="line">  c.Request();</span><br><span class="line">  c.SetState(Run);</span><br><span class="line">  c.Request();</span><br><span class="line">  <span class="keyword">delete</span> Run;</span><br><span class="line">  <span class="keyword">delete</span> fly;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:允许一个对象在其内部状态时改变它的行为，对象看起来似乎修改了它的类&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>中介者模式</title>
    <link href="http://example.com/jsblog/d036071c.html"/>
    <id>http://example.com/jsblog/d036071c.html</id>
    <published>2020-12-20T03:00:55.000Z</published>
    <updated>2020-12-20T03:09:07.580Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>: 用一个中介对象来封装一系列对象交互。中介者使各对象不需要显示的引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。<a id="more"></a></p><p><strong>动机</strong>:在软件构建过程中，经常会出现多个对象互相关联交互的情况，对象之间常常会维持一种复杂的引用关系，如果入到一些需求的更改，这种直接的引用关系将面临不断的变化。在这种情况下，我们可以使用一个“中介对象”来管理对象间的关联关系，避免相互交互的对象之间的紧耦合引用关系，从而更好地抵御变化。</p><p><strong>适用性</strong>:</p><p>\1. 一组对象以定义良好但复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解</p><p>\2. 一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象</p><p>3.想定制一个分部在许多个类中的行为，而又不想生成太多的子类</p><p><strong>结构：</strong></p><p><img src="https://pic4.zhimg.com/80/v2-47eb35886a17065369d7ed987f711fdb_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Mediator：中介者定义一个接口用于与各同事对象通信</p><p>ConcreteMediator : 具体中介通过协调各同事对象实现协作行为</p><p>Colleague class: 每一个同事类都知道它的中介者对象；每一个同事对象在需要与其他同事通信的时候，与它的中介者通信。</p><p><strong>协作</strong>：</p><p>同事向一个中介者对象发送和接收请求。中介者在各同事间适当地转发请求以实现协作行为。</p><p><strong>效果</strong>：</p><p>\1. 减少了子类生成</p><p>\2. 将各个colleague解耦</p><p>\3. 简化了协议对象</p><p>\4. 对对象如何协作进行了抽象</p><p>\5. 使控制集中化</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mediator</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SetMediator</span><span class="params">(Mediator *mediator)</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">(Person *p)</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Recive</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  Mediator *_mediator;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SetCook</span><span class="params">(Person *p)</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SetGuest</span><span class="params">(Person *p)</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(Person *p)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cook</span> :</span> <span class="keyword">public</span> Person &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetMediator</span><span class="params">(Mediator *mediator)</span> </span>&#123; _mediator = mediator; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Send</span><span class="params">(Person *p)</span> </span>&#123; _mediator-&gt;SendMessage(p); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Recive</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; cook receive &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Guest</span> :</span> <span class="keyword">public</span> Person &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetMediator</span><span class="params">(Mediator *mediator)</span> </span>&#123; _mediator = mediator; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Send</span><span class="params">(Person *p)</span> </span>&#123; _mediator-&gt;SendMessage(p); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Recive</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;guest receive &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMediator</span> :</span> <span class="keyword">public</span> Mediator &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  TestMediator() : _cook(<span class="literal">nullptr</span>), _guest(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">  ~TestMediator() &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetCook</span><span class="params">(Person *p)</span> </span>&#123; _cook = p; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SetGuest</span><span class="params">(Person *p)</span> </span>&#123; _guest = p; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(Person *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == _cook) &#123;</span><br><span class="line">      _cook-&gt;Recive();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _guest-&gt;Recive();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  Person *_cook;</span><br><span class="line">  Person *_guest;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  Person *cook = <span class="keyword">new</span> Cook;</span><br><span class="line">  Person *guest = <span class="keyword">new</span> Guest;</span><br><span class="line">  TestMediator *t = <span class="keyword">new</span> TestMediator;</span><br><span class="line">  cook-&gt;SetMediator(t);</span><br><span class="line">  guest-&gt;SetMediator(t);</span><br><span class="line">  t-&gt;SetCook(cook);</span><br><span class="line">  t-&gt;SetGuest(guest);</span><br><span class="line">  t-&gt;SendMessage(cook);</span><br><span class="line">  t-&gt;SendMessage(guest);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;: 用一个中介对象来封装一系列对象交互。中介者使各对象不需要显示的引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://example.com/jsblog/f5c535ea.html"/>
    <id>http://example.com/jsblog/f5c535ea.html</id>
    <published>2020-12-20T02:51:24.000Z</published>
    <updated>2020-12-20T03:09:07.606Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的哪些类可以一起工作。<a id="more"></a></p><p><strong>动机</strong>:在软件系统中，由于应用环境的变化，常常需要将“一些现存的对象”放在新的环境中应用，但是新环境要求的接口时这些现在对象所不满足的。</p><p><strong>适用性</strong>:</p><p>\1. 你想使用一个已存在的类，而它的接口不符合你的需求</p><p>\2. 你想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类协同工作</p><p>\3. （仅仅适用于对象适配器）你想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。</p><p><strong>结构：</strong></p><p><strong>类适配器：</strong></p><p><img src="https://pic1.zhimg.com/80/v2-a3d068dd105a02614ff5048734225668_720w.jpg" alt="img"></p><p><strong>对象适配器：</strong></p><p><img src="https://pic2.zhimg.com/80/v2-7cdae5c6cce55af5cd4ebdba807d4901_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Target : 定义Client使用的与特定领域相关的接口</p><p>Client : 与符合Target接口的对象协同</p><p>Adaptee：定义一个已经存在的接口，这个接口需要适配</p><p>Adapter: 对Adaptee的接口与Target接口进行适配</p><p><strong>协作</strong>：</p><p>Client在Adapter实例上调用一些操作。接着适配器调用Adapter的操作实现请求。</p><p><strong>效果</strong>：</p><p>\1. 用一个具体的Adapter类对Adaptee和Target进行适配。结果是当我们想要匹配一个类以及他的子类的时候，类Adapter将不能胜任工作。</p><p>\2. 使得Adapter可以重新定义Adaptee的部分行为，因为Adapter是Adaptee的子类</p><p>\3. 仅仅引入一个对象，并不需要额外的指针以间接得到Adaptee</p><p>\4. 允许一个Adapter与多个Adaptee-Adaptee本身以及它的所有子类同时工作，Adapter也可以一次给所有的Adaptee添加功能。</p><p>\5. 使得重定义Adaptee的行为比较困难。</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ITarget</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~ITarget()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  ITarget()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">OldInterface</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;exec &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> :</span> <span class="keyword">public</span>  ITarget&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Adapter(Adaptee *_p)&#123;</span><br><span class="line">    _adaptee = _p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _adaptee-&gt;OldInterface();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Adaptee *_adaptee;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Adaptee *_p = <span class="keyword">new</span> Adaptee;</span><br><span class="line">  ITarget *target = <span class="keyword">new</span> Adapter(_p);</span><br><span class="line">  target-&gt;Process();</span><br><span class="line">  <span class="keyword">delete</span> _p;</span><br><span class="line">  <span class="keyword">delete</span> target;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的哪些类可以一起工作。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://example.com/jsblog/7b510e10.html"/>
    <id>http://example.com/jsblog/7b510e10.html</id>
    <published>2020-12-20T02:50:44.000Z</published>
    <updated>2020-12-20T03:09:07.583Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:为其他对象提供一种代理以控制对这个对象的访问。 <a id="more"></a></p><p><strong>动机</strong>： 在面向对象系统中，有些对对象由于某种原因（比如对象创建的开销很大，或者某些操作需要安全控制，或者需要进程外的访问等）直接访问会给使用者、或者系统结构带来麻烦。</p><p><strong>适用性</strong>:</p><p>\1. 远程代理为对象在不同地址空间提供局部代表；</p><p>\2. 虚代理根据需要创建开销来那个很大的对象</p><p>\3. 保护代理控制对原始对象的访问；</p><p>\4. 智能指针取代了简单的指针，它在访问对象时添加了一些附加操作</p><p><strong>结构：</strong></p><p><img src="https://pic4.zhimg.com/80/v2-fdd1d393d7f2bfd7600b351a0255b36f_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Proxy:保存一个引用使得代理可以访问实体；提供一个与subject的接口相同的接口；控制对实体的存取；其他功能依赖于代理的类型：</p><p>Remote Proxy;负责对请求及其参数进行编码，并向不同地址空间中的实体发送已编码的请求。</p><p>Virtual Proxy : 可以缓存实体的附加信息，以便延迟对它的访问</p><p>Protection Proxy : 检查调用者是否具有实现一个请求所必需的访问权限</p><p>Subject: 定义RealSubject和Proxy的共用接口，这样就在任何使用RealSubject的地方可以使用Proxy;</p><p>RealSubject : 定义proxy所代表的的实体</p><p><strong>协作</strong>：</p><p>代理根据其种类，在适当的时候向RealSubject转发请求</p><p><strong>效果</strong>：</p><p>\1. Remote Proxy可以隐藏一个对象存在不同地址空间的事实</p><p>\2. Virtual Proxy可以进行最优化，例如根据要求创建对象</p><p>\3. Protection Proxy和Smart Reference都允许在访问一个对象时有一些附加的内务处理。</p><p>\4. Proxy模式还可以隐藏一种称为copy-on-write的优化方式，该优化与根据需要创建对象有关。</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Subject() &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Subject()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> :</span> <span class="keyword">public</span> Subject&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  RealSubject()&#123;&#125;</span><br><span class="line">  ~RealSubject()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Operate</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; I am real subject&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> :</span> <span class="keyword">public</span> Subject&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Proxy() : _sub(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">  ~Proxy()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Operate</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_sub == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">      _sub = <span class="keyword">new</span> RealSubject;</span><br><span class="line">    &#125;</span><br><span class="line">    _sub-&gt;Operate();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Subject *_sub;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Proxy p;</span><br><span class="line">  p.Operate();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:为其他对象提供一种代理以控制对这个对象的访问。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="http://example.com/jsblog/f7de8aa8.html"/>
    <id>http://example.com/jsblog/f7de8aa8.html</id>
    <published>2020-12-20T02:50:03.000Z</published>
    <updated>2020-12-20T03:09:07.589Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:为子系统中一组接口提供一个一致的界面，Façade模式定义了一个高层接口，这个接口使得子系统更加容易调用。 <a id="more"></a></p><p><strong>动机</strong>： 将一个系统划分成若干个子系统有利于降低系统的复杂性。一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小。达到该目标的途径之一就是引入一个外观对象，它为子系统中较为一般的设施提供了一个单一而又简单的界面。</p><p><strong>适用性</strong>:</p><p>当你要为复杂子系统提供一个简单的接口时；客户程序与抽象类的实现部分之间存在着很大的依赖性；当你需要构建一个层次结构的子系统时，使用Façade模式定义子系统中每层的入口点。</p><p><strong>结构：</strong></p><p><img src="https://pic4.zhimg.com/80/v2-9abffb77180f485fe7bc3f885ce27ddf_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Façade : 知道哪些子系统类负责处理请求；将客户的请求代理给适当的子系统对象</p><p>SublSystem classes: 实现子系统的功能；处理由façade对象指派的任务；没有Façade的任何相关信息。</p><p><strong>协作</strong>：客户程序通过发送请求给façade的方式与子系统通信，façade将这些消息转发给适当的子系统对象，尽管是子系统中的有关对象在做实际工作，但façade某事本想必须将它的接口转换成子系统的接口。使用façade的客户程序不需要直接访问子系统对象。</p><p><strong>效果：</strong></p><p>\1. 他对客户屏蔽了子系统组件，因而减少了客户处理的对象的数目并使得子系统使用起来更加方便。</p><p>\2. 它实现了子系统与客户之间的松耦合关系，而子系统内部往往是紧耦合的。</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subsystem1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Scanner</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; subsystem 1&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subsystem2</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Scanner</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; subsystem 2&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subsystem3</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Linker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; subsystem 3&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _Subsystem1.Scanner();</span><br><span class="line">    _Subsystem2.Scanner();</span><br><span class="line">    _Subsystem3.Linker();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Subsystem1 _Subsystem1;</span><br><span class="line">  Subsystem2 _Subsystem2;</span><br><span class="line">  Subsystem3 _Subsystem3;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Facade test;</span><br><span class="line">  test.Method();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:为子系统中一组接口提供一个一致的界面，Façade模式定义了一个高层接口，这个接口使得子系统更加容易调用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>享元模式</title>
    <link href="http://example.com/jsblog/e19da94a.html"/>
    <id>http://example.com/jsblog/e19da94a.html</id>
    <published>2020-12-20T02:49:18.000Z</published>
    <updated>2020-12-20T03:09:07.581Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:运用共享技术有效地支持大量细粒度的对象 <a id="more"></a></p><p><strong>动机</strong>：在软件系统采用纯粹对象的对象方案的问题在于大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时代价主要指内存需求方面的代价。</p><p><strong>适用性</strong>:一个应用程序使用了大量对象；完全由于使用大量的对象造成很大的存储开销；对象的大多数状态都可变为外部状态；如果删除对象的外部状态，那么可以使用相对较少的共享对象取代外部对象；应用程序不依赖与对象标识。</p><p><strong>结构：</strong></p><p><img src="https://pic1.zhimg.com/80/v2-0ccc50fbd97649c2203b08be57abc3e4_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Flyweight :描述一个接口，通过这个接口flyweight可以接受并作用于外部状态</p><p>ConcreteFlyweight : 实现flyweight对象的接口，并为内部状态增加存储空间。</p><p>UnsharedConcreteFlyweight: 并非所有的flyweight子类都需要被共享。flyweight接口使共享成为可能，但它并不强制共享。</p><p>FlyweightFactory : 创建并管理flyweight对象，确保合理地共享flyweight对象</p><p>Client : 维持一个队flyweight的引用；计算或存储一个flyweight的外部状态</p><p><strong>协作</strong>：</p><p>flyweight执行时所需的状态必定是内部的或外部的；</p><p>用户不应直接对ConcreteFlyweight类进行实例化，而只能通过FlyweightFactory对象得到ConcreteFlyweight对象。</p><p><strong>效果：</strong></p><p>共享的flyweight越多，空间的节省就越大，存储的节约就越大。</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> :</span> <span class="keyword">public</span> Flyweight&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;flyweight&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">Flyweight *<span class="title">GetFlyweight</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> iterator = _flyweight.find(key);</span><br><span class="line">    <span class="keyword">if</span> (iterator != _flyweight.end())&#123;</span><br><span class="line">      <span class="keyword">return</span> iterator-&gt;second;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      _flyweight[key] = <span class="keyword">new</span> ConcreteFlyweight;</span><br><span class="line">      <span class="keyword">return</span> _flyweight[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,Flyweight*&gt; _flyweight;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">  FlyweightFactory ff;</span><br><span class="line">  Flyweight *flyweight = ff.GetFlyweight(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">  flyweight-&gt;Operation();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:运用共享技术有效地支持大量细粒度的对象&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://example.com/jsblog/f1601c3e.html"/>
    <id>http://example.com/jsblog/f1601c3e.html</id>
    <published>2020-12-20T02:48:23.000Z</published>
    <updated>2020-12-20T03:09:07.585Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:保证一个类仅有一个实例，并提供一个访问它的全局访问点 <a id="more"></a></p><p><strong>动机</strong>： 在软件系统中，经常有这样一些特殊的类，必须保证它们在系统中只存在一个实例，才能确保它们的逻辑正确性以及良好的效率</p><p><strong>适用性</strong>:当类只能有一个实例并且客户可以从一个众所周知的访问点访问它时；当这个唯一实例应该是通过子类化可扩展的，并且客户应该无须更改代码就能使用的一个扩展的实例时。</p><p><strong>结构：</strong></p><p><img src="https://pic1.zhimg.com/80/v2-fcf8ea4d4a7bc8f75f416b23f9cea8a0_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>定义一个Instance操作，允许客户访问它的唯一实例；可能创建它自己的唯一实例</p><p><strong>协作</strong>：</p><p>客户只能通过Singleton的Instance操作访问一个singleton的实例</p><p><strong>效果：</strong></p><p>\1. 对唯一实例的受控访问</p><p>\2. 缩小命名空间</p><p>\3. 允许对操作和表示的精化</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Singleton()&#123;&#125;</span><br><span class="line">  ~Singleton()&#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> Singleton *_instance;</span><br><span class="line">&#125;;</span><br><span class="line">Singleton *Singleton::_instance = <span class="number">0</span>;</span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (_instance == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">    _instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>  _instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Singleton *instance = Singleton::getInstance();</span><br><span class="line">  instance-&gt;Run();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:保证一个类仅有一个实例，并提供一个访问它的全局访问点&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="http://example.com/jsblog/fe816c3c.html"/>
    <id>http://example.com/jsblog/fe816c3c.html</id>
    <published>2020-12-20T02:47:41.000Z</published>
    <updated>2020-12-20T03:09:07.590Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:将一个复杂对象的创建与它的表示分离开，使得同样的构建过程可以创建不同的表示<a id="more"></a></p><p><strong>动机</strong>：在软件系统中，有时候面临着“一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定</p><p><strong>适用性</strong>:当复杂对象的算法应该独立于该对象的组成部分以及他们的装配方式时；当构造过程必须允许被构造的对象有不同的表示时。</p><p><strong>结构：</strong></p><p><img src="https://pic2.zhimg.com/80/v2-8e2ec9bdb33721427132596b8e0d5419_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Builder : 为创建一个Product对象的各个部件指定抽象接口</p><p>ConcreteBuilder: 实现builder接口以构造和装配该产品的各个部件;定义并跟踪它所创建的表示；提供一个检索产品的接口</p><p>Director: 构造一个使用Builder接口的对象</p><p>Product: 表示被构造的复杂对象；包含定义组成的部件类</p><p><strong>协作</strong>：</p><p>\1. 客户创建Director对象，并用它所想要的Builder对象进行配置</p><p>\2. 一旦生成产品部件，Director就通知生成器</p><p>\3. 生成器处理Director的请求，并将部件添加到该产品中</p><p>\4. 客户从生成器中检索产品</p><p><strong>效果：</strong></p><p>\1. 它可以使你改变一个产品的内部表示</p><p>\2. 他将构造代码和表示代码分开</p><p>\3. 它使你可对构造过程进行更精细的控制</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  House() &#123;&#125;</span><br><span class="line">  House(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; window, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; door)</span><br><span class="line">      : _window(window), _door(door) &#123;&#125;</span><br><span class="line">  ~House() &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setWindow</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; window)</span> </span>&#123; _window = window; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setDoor</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; door)</span> </span>&#123; _door = door; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;the window is &quot;</span> &lt;&lt; _window &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;the door is &quot;</span> &lt;&lt; _door &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> _door;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> _window;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseBuilder</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~HouseBuilder()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> House* <span class="title">getHouse</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildHouse</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildDoor</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildWindow</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  HouseBuilder() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHouseBuilder</span> :</span> <span class="keyword">public</span> HouseBuilder &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  ConcreteHouseBuilder()&#123;&#125;</span><br><span class="line">  ~ConcreteHouseBuilder()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BuildHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _house = <span class="keyword">new</span> House;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">House* <span class="title">getHouse</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _house;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BuildDoor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    _house-&gt;setDoor(<span class="string">&quot;wood door&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">BuildWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    _house-&gt;setWindow(<span class="string">&quot; small window &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  House* _house;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Director() &#123;&#125;</span><br><span class="line">  ~Director()&#123;&#125;</span><br><span class="line">  <span class="function">House* <span class="title">Construct</span><span class="params">(HouseBuilder* builder)</span></span>&#123;</span><br><span class="line">    builder-&gt;BuildHouse();</span><br><span class="line">    builder-&gt;BuildDoor();</span><br><span class="line">    builder-&gt;BuildWindow();</span><br><span class="line">    <span class="keyword">return</span> builder-&gt;getHouse();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">  HouseBuilder* builder = <span class="keyword">new</span> ConcreteHouseBuilder;</span><br><span class="line">  Director D;</span><br><span class="line">  House *house = D.Construct(builder);</span><br><span class="line">  house-&gt;Show();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:将一个复杂对象的创建与它的表示分离开，使得同样的构建过程可以创建不同的表示&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="http://example.com/jsblog/91ad9ce3.html"/>
    <id>http://example.com/jsblog/91ad9ce3.html</id>
    <published>2020-12-20T02:46:58.000Z</published>
    <updated>2020-12-20T03:09:07.586Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象<a id="more"></a></p><p><strong>动机：</strong>在软件系统中，经常面临这“某些结构复杂的对象”的创建工作；由于需求的变化，这些对象经常面临着剧烈的变化，但是它们却拥有比较稳定一致的接口。</p><p><strong>适用性</strong>：当一个系统应该独立于它的产品创建、构成和表示时；当要实例化的类是在运行时指定时；为了避免创建一个与产品类层次平行的工厂类层次时；当一个类的实例只能有几个不同状态组合在一起时。</p><p><strong>结构：</strong></p><p><img src="https://pic3.zhimg.com/80/v2-813bc34021bacb43d78284a7f9b21f32_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Prototype: 声明一个克隆自身的接口</p><p>ConcretePrototype : 实现一个克隆自身的操作</p><p>Client : 让一个原型克隆自身从而创建新的对象</p><p><strong>协作：</strong>客户请求一个原型克隆自身</p><p><strong>效果：</strong></p><p>\1. 可以运行时增加和删除产品</p><p>\2. 改变值以指定新对象</p><p>\3. 改变结构可以指定新的对象</p><p>\4. 减少子类的构造</p><p>\5. 用类动态配置应用</p><p><strong>实现：</strong></p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prototype</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> Prototype* <span class="title">Clone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> :</span> <span class="keyword">public</span> Prototype&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ConcretePrototype()&#123;&#125;</span><br><span class="line">  ConcretePrototype(<span class="keyword">const</span> ConcretePrototype&amp; rhs)&#123;&#125;</span><br><span class="line">  ~ConcretePrototype()&#123;&#125;</span><br><span class="line">  <span class="function">Prototype* <span class="title">Clone</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> ConcretePrototype(*<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; test &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Client()&#123;</span><br><span class="line">    _prototype = <span class="keyword">new</span> ConcretePrototype;</span><br><span class="line">  &#125;</span><br><span class="line">~Client()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Prototype* p2 = _prototype-&gt;Clone();</span><br><span class="line">    p2-&gt;Run();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Prototype *_prototype;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Client c;</span><br><span class="line">  c.Test();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="http://example.com/jsblog/9b7d6e62.html"/>
    <id>http://example.com/jsblog/9b7d6e62.html</id>
    <published>2020-12-20T02:46:17.000Z</published>
    <updated>2020-12-20T03:09:07.591Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:提供一个接口以创建一系列相关或相互依赖的对象，而无需指定它们具体的类。<a id="more"></a></p><p><strong>动机：</strong> 在软件系统中 ，经常面临着“一系列相互依赖的对象”的创建工作；同时由于需求的变化，往往存在更多系列对象的创建工作。</p><p><strong>适用性</strong>：一个系统要独立于它的产品的创建，组合和表示；一个系统由许多产品系列中的一个配置；要强调一系列相关的产品对象的设计以便进行联合使用；提供一个产品类库，但只想显示它们的接口而不是实现。</p><p><strong>结构：</strong></p><p><img src="https://pic3.zhimg.com/80/v2-b03e7729edbc2c9402c6c3dea33cf48e_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>AbstractFactory : 声明一个创建抽象产品对象的操作接口</p><p>ConcreteFactory: 实现具体创建对象的操作</p><p>AbstractProduct : 为一类产品对象声明一个接口</p><p>ConcreteProduct : 定义一个将被相应的具体工厂创建的产品对象；实现AbstractProduct的接口</p><p>Client : 仅仅使用由AbstractFactory 和AbstractProduct类声明的接口</p><p><strong>协作：</strong>通常在运行时创建一个ConcreteFactory类的实例。这一具体的工厂创建具有特定实现的产品对象。为创建不同的产品对象，客户应使用不同的具体工厂；AbstractFactory将产品对象的创建延迟到它的ConcreteFactory子类。</p><p><strong>效果：</strong></p><p>\1. 它分离了具体的类，它将客户与类的实现分离</p><p>\2. 它使得易于交换产品系列</p><p>\3. 它有利于产品的一致性，当一个系列中的产品对象被设计成一起工作时，一个应用一次只能使用它同一个系列中的对象，这一点很重要。AbstractFactory很容易实现这一点。</p><p>\4. 难以支持新种类的产品。</p><p><strong>实现：</strong></p><p>实现时要注意：</p><p>\1. 将工厂作为单件，即一个应用中每个产品序列只需要一个ConcreteFactory的实例</p><p>\2. 创建产品</p><p>\3. 定义可扩展的工厂</p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//抽象产品 手机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractPhone</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~AbstractPhone()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Phone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iphone</span> :</span> <span class="keyword">public</span> AbstractPhone&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Phone</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; iphone &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaomiPhone</span>:</span> <span class="keyword">public</span> AbstractPhone&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Phone</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; xiao mi &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//抽象产品 personal computer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractPC</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~AbstractPC()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PC</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacOs</span> :</span> <span class="keyword">public</span> AbstractPC&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; MACOS &quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaomiPC</span>:</span> <span class="keyword">public</span> AbstractPC&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; xiao mi pc&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//抽象工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~AbstractFactory()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> AbstractPhone* <span class="title">createPhone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> AbstractPC* <span class="title">createPC</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// apple</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> :</span> <span class="keyword">public</span>  AbstractFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Apple()&#123;</span><br><span class="line">    _pc = <span class="literal">NULL</span>;</span><br><span class="line">    _phone = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ~Apple()&#123;&#125;</span><br><span class="line">  <span class="function">AbstractPhone *<span class="title">createPhone</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_phone == <span class="literal">NULL</span>)&#123;</span><br><span class="line">      _phone = <span class="keyword">new</span> Iphone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _phone;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">AbstractPC *<span class="title">createPC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_pc == <span class="literal">NULL</span>)&#123;</span><br><span class="line">      _pc = <span class="keyword">new</span> MacOs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _pc;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  AbstractPC *_pc;</span><br><span class="line">AbstractPhone *_phone;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//小米</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMi</span> :</span> <span class="keyword">public</span>  AbstractFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  XiaoMi()&#123;</span><br><span class="line">    _pc = <span class="literal">NULL</span>;</span><br><span class="line">    _phone = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ~XiaoMi()&#123;&#125;</span><br><span class="line">  <span class="function">AbstractPhone *<span class="title">createPhone</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_phone == <span class="literal">NULL</span>)&#123;</span><br><span class="line">      _phone = <span class="keyword">new</span> XiaomiPhone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _phone;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">AbstractPC *<span class="title">createPC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_pc == <span class="literal">NULL</span>)&#123;</span><br><span class="line">      _pc = <span class="keyword">new</span> XiaomiPC;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _pc;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  AbstractPC *_pc;</span><br><span class="line">  AbstractPhone *_phone;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//client</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setFactory</span><span class="params">(AbstractFactory *factory)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;_factory = factory;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    _pc = _factory-&gt;createPC();</span><br><span class="line">    _phone = _factory-&gt;createPhone();</span><br><span class="line">    _pc-&gt;PC();</span><br><span class="line">    _phone-&gt;Phone();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  AbstractFactory *_factory;</span><br><span class="line">  AbstractPC *_pc;</span><br><span class="line">  AbstractPhone *_phone;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Client c;</span><br><span class="line">  Apple *apple = <span class="keyword">new</span> Apple;</span><br><span class="line">  c.setFactory(apple);</span><br><span class="line">  c.test();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:提供一个接口以创建一系列相关或相互依赖的对象，而无需指定它们具体的类。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="http://example.com/jsblog/48598499.html"/>
    <id>http://example.com/jsblog/48598499.html</id>
    <published>2020-12-20T02:45:14.000Z</published>
    <updated>2020-12-20T03:09:07.589Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图</strong>:定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类. <a id="more"></a></p><p><strong>动机：</strong>在软件系统中，经常面临着创建对象的工作；由于需求的变化，需要创建的对象的具体类型经常变化。</p><p><strong>适用性</strong>：</p><p>以下情况可以使用工厂方法模式：</p><p>当一个类不知道它所必须创建的对象的类的时候；</p><p>当一个类希望由它的子类来指定他所创建的对象的时候</p><p>当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将那一个帮助子类是代理者这一信息局部化的时候。</p><p><strong>结构：</strong></p><p><img src="https://pic3.zhimg.com/80/v2-fedd4ac000703a8e0ec7546c8d1f0712_720w.jpg" alt="img"></p><p><strong>参与者</strong>：</p><p>Product : 定义工厂方法所创建的对象的接口</p><p>ConcreteProduct : 实现product接口</p><p>Creator : 声明工厂方法，该方法返回一个Product类型的对象。Creator也可以定义一个工厂方法的缺省实现，它返回一个缺省的ConcreteProduct对象。可以调用工厂方法以创建一个ConcreteProduct对象。</p><p>ConcreteCreator: 重定义工厂方法以返回一个ConcreteProduct实例</p><p><strong>效果：</strong></p><p>（1） 为子类提供钩子（hook）用工厂方法在一个类的内部创建对象通常比直接创建对象更加灵活。</p><p>（2） 连接平行的类层次，工厂方法并不是只被Creator调用，客户可以找到一些有用的工厂方法，尤其在平行的类层次情况下。</p><p><strong>实现：</strong></p><p>实现工厂方法模式的时候要考虑下面几个问题：</p><p>\1. 主要由两种情况：Creator是一个抽象类不提供它所声明的工厂方法的缺省的实现；Creator是一个具体类，并提供缺省的实现。</p><p>\2. 参数化工厂方法</p><p>\3. 特定的编程语言的变化和问题</p><p>\4. 使用模板以避免创建子类</p><p>代码示例如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Product()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> :</span> <span class="keyword">public</span> Product&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Car()&#123;&#125;</span><br><span class="line">  ~Car()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;run in the road&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> Product *<span class="title">CreateProduct</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Product&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCrator</span> :</span> <span class="keyword">public</span> Creator&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ConcreteCrator()&#123;&#125;</span><br><span class="line">  ~ConcreteCrator()&#123;&#125;</span><br><span class="line">  <span class="function">_Product *<span class="title">GetProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_product == <span class="literal">NULL</span>)&#123;</span><br><span class="line">      _product = CreateProduct();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _product;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> _Product* <span class="title">CreateProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> _Product;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  _Product *_product;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ConcreteCrator&lt;Car&gt; myCar;</span><br><span class="line"> Car* c = myCar.GetProduct();</span><br><span class="line"> c-&gt;Run();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图&lt;/strong&gt;:定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method使一个类的实例化延迟到其子类.&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="http://example.com/jsblog/563268dc.html"/>
    <id>http://example.com/jsblog/563268dc.html</id>
    <published>2020-12-20T02:44:25.000Z</published>
    <updated>2020-12-20T03:09:07.593Z</updated>
    
    <content type="html"><![CDATA[<p><strong>意图：</strong>将抽象部分与它的实现部分分离，使他们能够独立的变化。<a id="more"></a></p><p><strong>动机：</strong>当一个抽象可能有多个实现时，通常使用继承来协调它们。抽象类定义对该抽象的接口，而具体的子类则用不同方式加以实现。但是此方法优势不够灵活。继承机制将抽象部分与它的实现部分固定在一起，使得难以对抽象部分和实现部分独立地进行修改，扩充和复用。为了解决这个问题，对抽象子类的所有操作都有实现这个抽象接口的实现的子类所实现。这样将抽象类与实现抽象的类分离开来，它们之间的关系称为桥接，它在抽象类与它的实现之间起到了桥梁的作用，可以是它们独立的变化。</p><p><strong>适用性：</strong>你不希望抽象和它的实现部分之间有一个固定的绑定关系；类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充；对一个抽象的实现部分的修改应对客户不产生影响即客户的代码不需要重新编译；你相对客户完全隐藏抽象的实现部分；有许多类要生成，但实现类中不必实现所有的接口说明你必须将一个对象分解成两个部分；你想在多个类中共享但是同时要求客户不必知道。</p><p><strong>结构如下</strong>：</p><p><img src="https://pic3.zhimg.com/80/v2-4daf9447e8b989380ee454cf867750a2_720w.jpg" alt="img"></p><p><strong>参与者：</strong></p><p>Abstraction:定义抽象类的接口，维护一个指向Implementor的指针</p><p>RefindedAbstraction: 扩充由Abstraction的接口</p><p>Implementor: 定义实现类的接口，该接口不一定要和Abstraction的接口完全一致。一般来讲，Implementor接口只提供基本操作，而Abstraction则定义这些基本操作的较高层次的操作。</p><p>ConcreteImplementor：实现Implementor接口并定义它的具体表现。</p><p><strong>效果：</strong></p><p>分离接口及其实现部分；提高可扩充性；实现细节对客户透明。</p><p><strong>代码实现如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Implementor</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Implementor()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> :</span> <span class="keyword">public</span> Implementor&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;concrete implement algorithm A&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorB</span> :</span> <span class="keyword">public</span> Implementor&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;concrete implement algorithm B&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Abstraction()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Implementor *_implementor;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefindedAbstraction</span> :</span> <span class="keyword">public</span> Abstraction&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  RefindedAbstraction(Implementor *impl) &#123;</span><br><span class="line">    _implementor = impl;</span><br><span class="line">  &#125;</span><br><span class="line">  ~RefindedAbstraction()&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    _implementor-&gt;Operation();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ConcreteImplementorB B;</span><br><span class="line">  <span class="function">RefindedAbstraction <span class="title">refindedAbstraction</span><span class="params">(&amp;B)</span></span>;</span><br><span class="line">  refindedAbstraction.Operation();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;意图：&lt;/strong&gt;将抽象部分与它的实现部分分离，使他们能够独立的变化。&lt;/p&gt;</summary>
    
    
    
    
    <category term="patterns" scheme="http://example.com/tags/patterns/"/>
    
  </entry>
  
</feed>
